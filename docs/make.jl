using OptimalTransport
using Literate: Literate
using Pkg: Pkg

if haskey(ENV, "GITHUB_ACTIONS")
    # Print `@debug` statements (https://github.com/JuliaDocs/Documenter.jl/issues/955)
    ENV["JULIA_DEBUG"] = "Documenter"
end

const EXAMPLES = ("basic",)
const INPUT = joinpath(@__DIR__, "..", "examples")
const OUTPUT = joinpath(@__DIR__, "src", "examples")

ispath(OUTPUT) && rm(OUTPUT; recursive=true)
#mkpath(joinpath(OUTPUT, "figures"))

# Add link to nbviewer below the first heading of level 1
function preprocess(content)
    sub = SubstitutionString(
        """
\\0
#
#md # [![](https://img.shields.io/badge/show-nbviewer-579ACA.svg)](@__NBVIEWER_ROOT_URL__/examples/@__NAME__.ipynb)
#md #
# You are viewing the
#md # HTML output generated by [Documenter.jl](https://github.com/JuliaDocs/Documenter.jl) and
#nb # notebook output generated by
# [Literate.jl](https://github.com/fredrikekre/Literate.jl) from the
# [Julia source file](@__REPO_ROOT_URL__/examples/@__NAME__/script.jl).
# The corresponding
#md # notebook can be viewed in [nbviewer](@__NBVIEWER_ROOT_URL__/examples/@__NAME__.ipynb).
#nb # HTML output can be viewed [here](https://juliaoptimaltransport.github.io/OptimalTransport.jl/dev/examples/@__NAME__/).
#md #
#md # ```@setup @__NAME__
#md # import Pkg
#md # Pkg.activate("$(INPUT)/@__NAME__")
#md # Pkg.instantiate()
#md # ```
#
        """,
    )
    return replace(content, r"^# # [^\n]*"m => sub; count=1)
end

for name in EXAMPLES
    file = joinpath(INPUT, name, "script.jl")

    # Activate project environment
    Pkg.activate(dirname(file)) do
        Pkg.instantiate()

        Literate.markdown(file, OUTPUT; name=name, documenter=true, preprocess=preprocess)
        Literate.notebook(file, OUTPUT; name=name, documenter=true, preprocess=preprocess)
    end
end

using Documenter
using PyCall

makedocs(;
    modules=[OptimalTransport, POT],
    repo="https://github.com/JuliaOptimalTransport/OptimalTransport.jl/blob/{commit}{path}#L{line}",
    sitename="OptimalTransport.jl",
    format=Documenter.HTML(;
        prettyurls=get(ENV, "CI", "false") == "true",
        canonical="https://juliaoptimaltransport.github.io/OptimalTransport.jl",
        assets=String[],
    ),
    pages=[
        "Home" => "index.md",
        "POT" => "pot.md",
        "Examples" => [joinpath("examples", "$(name).md") for name in EXAMPLES],
    ],
    strict=true,
    checkdocs=:exports,
)

deploydocs(; repo="github.com/JuliaOptimalTransport/OptimalTransport.jl", push_preview=true)
