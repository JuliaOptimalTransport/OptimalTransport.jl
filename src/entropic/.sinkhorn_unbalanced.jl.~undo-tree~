(undo-tree-save-format-version . 1)
"72403534546be866c31671786448cec7aa85c8cd"
[nil nil nil nil (25331 2872 683091 716000) 0 nil]
([nil nil ((8937 . 8956) (8935 . 8937) (t 25310 7615 176658 741000)) nil (25331 2872 683088 504000) 0 nil])
([nil nil ((#("function sinkhorn_u
" 0 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 19 (fontified t face font-lock-function-name-face) 19 20 (fontified t)) . 8937) (undo-tree-id12 . -18) (undo-tree-id13 . -18) (undo-tree-id14 . 1) (undo-tree-id15 . -18) (undo-tree-id16 . -18) (undo-tree-id17 . -18) (undo-tree-id18 . -18) 8955) nil (25331 2872 683083 824000) 0 nil])
([nil nil ((7553 . 7555)) nil (25331 2872 683067 621000) 0 nil])
([nil nil ((7554 . 7571)) nil (25331 2872 683064 269000) 0 nil])
([nil nil ((7590 . 7594) (#("
" 0 1 (fontified t)) . -7590) (undo-tree-id3 . -1) (#(" " 0 1 (fontified t)) . -7591) (undo-tree-id4 . -1) (#(" " 0 1 (fontified t)) . -7592) (undo-tree-id5 . -1) (#(" " 0 1 (fontified t)) . -7593) (undo-tree-id6 . -1) (#(" " 0 1 (fontified t)) . -7594) (undo-tree-id7 . -1) (#("C" 0 1 (fontified t)) . -7595) (undo-tree-id8 . -1) 7596 (7595 . 7596) (7591 . 7595) (#(" " 0 1 (fontified nil)) . 7590) (undo-tree-id9 . -1) (7591 . 7592) (#("C" 0 1 (fontified t)) . -7591) (undo-tree-id10 . -1) 7592 (7589 . 7592) (7588 . 7589) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 7588) (undo-tree-id11 . -3) 7591 (7588 . 7591) (7583 . 7588) (7571 . 7583)) nil (25331 2872 683055 818000) 0 nil])
([nil nil ((7669 . 7671) (#(", " 0 2 (fontified t)) . -7669) (undo-tree-id0 . -2) 7671 (#("maxiter " 0 8 (fontified t)) . -7671) (undo-tree-id1 . -8) 7679 (7672 . 7679) (7651 . 7672) (7648 . 7651) (7627 . 7648) (7606 . 7627) (7605 . 7606) (#("\\varepsilon" 0 1 (fontified t syntax-table (1)) 1 11 (fontified t)) . 7605) (undo-tree-id2 . -11) 7616 (7615 . 7616) (7594 . 7615)) nil (25331 2872 683024 808000) 0 nil])
([nil nil ((7654 . 7658) (#("_" 0 1 (fontified t)) . -7654) (undo-tree-id85 . -1) 7655 (#("iter" 0 4 (fontified t)) . -7655) (undo-tree-id86 . -4) 7659 (t 25331 2872 702642 387000)) nil (25331 2907 722446 517000) 0 nil])
([nil nil ((7707 . 7710) (7703 . 7707) (#("    " 0 4 (fontified nil)) . 7702) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -4) (7701 . 7707) (7700 . 7701) (7695 . 7700) (#(")" 0 1 (fontified t)) . -7695) (undo-tree-id82 . -1) (undo-tree-id83 . 1) (undo-tree-id84 . -1) 7696 (7691 . 7696) (7670 . 7691)) nil (25331 2907 722436 879000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7703) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (undo-tree-id25 . -4) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . -4) (undo-tree-id69 . -4) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -4) 7709) nil (25331 2909 804623 300000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7696) (undo-tree-id212 . -2) (undo-tree-id213 . -2) (undo-tree-id214 . -2) (undo-tree-id215 . -2) (undo-tree-id216 . -2) (undo-tree-id217 . -2) (undo-tree-id218 . -2) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . -2) (undo-tree-id222 . -2) (undo-tree-id223 . -2) (undo-tree-id224 . -2) (undo-tree-id225 . -2) (undo-tree-id226 . -2) (undo-tree-id227 . -2) (undo-tree-id228 . -2) (undo-tree-id229 . -2) (undo-tree-id230 . -2) (undo-tree-id231 . -2) (undo-tree-id232 . -2) (undo-tree-id233 . -2) (undo-tree-id234 . -2) (undo-tree-id235 . -2) (undo-tree-id236 . -2) (undo-tree-id237 . -2) (undo-tree-id238 . -2) (undo-tree-id239 . -2) (undo-tree-id240 . -2) (undo-tree-id241 . -2) (undo-tree-id242 . -2) (undo-tree-id243 . -2) (undo-tree-id244 . -2) (undo-tree-id245 . -2) (undo-tree-id246 . -2) (undo-tree-id247 . -2) (undo-tree-id248 . -2) (undo-tree-id249 . -2) (undo-tree-id250 . -2) (undo-tree-id251 . -2) (undo-tree-id252 . -2) (undo-tree-id253 . -2) (undo-tree-id254 . -2) (undo-tree-id255 . -2) (undo-tree-id256 . -2) (undo-tree-id257 . -2) (undo-tree-id258 . -2) (undo-tree-id259 . -2) (undo-tree-id260 . -2) (undo-tree-id261 . -2) (undo-tree-id262 . -2) (undo-tree-id263 . -2) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -2) (undo-tree-id275 . -2) (undo-tree-id276 . -2) (undo-tree-id277 . -2) (undo-tree-id278 . -2) (undo-tree-id279 . -2) (undo-tree-id280 . -2) (undo-tree-id281 . -2) (undo-tree-id282 . -2) (undo-tree-id283 . -2) (undo-tree-id284 . -2) (undo-tree-id285 . -2) (undo-tree-id286 . -2) (undo-tree-id287 . -2) (undo-tree-id288 . -2) (undo-tree-id289 . -2) (undo-tree-id290 . -2) (undo-tree-id291 . -2) (undo-tree-id292 . -2) (undo-tree-id293 . -2) (undo-tree-id294 . -2) (undo-tree-id295 . -2) (undo-tree-id296 . -2) (undo-tree-id297 . -2) (undo-tree-id298 . -2) (undo-tree-id299 . -2) (undo-tree-id300 . -2) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -2) (undo-tree-id304 . -2) (undo-tree-id305 . -2) (undo-tree-id306 . -2) (undo-tree-id307 . -2) (undo-tree-id308 . -2) (undo-tree-id309 . -2) (undo-tree-id310 . -2) (undo-tree-id311 . -2) (undo-tree-id312 . -2) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -2) (undo-tree-id318 . -2) (undo-tree-id319 . -2) (undo-tree-id320 . -2) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -2) (undo-tree-id325 . -2) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -2) (undo-tree-id346 . -2) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -2) (undo-tree-id357 . -2) (undo-tree-id358 . -2) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -2) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) 7698 (t 25331 2907 729116 848000)) nil (25331 2911 344790 850000) 0 nil] [nil nil ((7700 . 7701) (7696 . 7700) (7696 . 7697) (#("    )
" 0 6 (fontified t)) . 7696) (undo-tree-id87 . -2) (undo-tree-id88 . -2) (undo-tree-id89 . -2) (undo-tree-id90 . -6) (undo-tree-id91 . -6) (undo-tree-id92 . -6) (undo-tree-id93 . -6) (undo-tree-id94 . -6) (undo-tree-id95 . -6) (undo-tree-id96 . -6) (undo-tree-id97 . -2) (undo-tree-id98 . -6) (undo-tree-id99 . -6) (undo-tree-id100 . -6) (undo-tree-id101 . -6) (undo-tree-id102 . -6) (undo-tree-id103 . -6) (undo-tree-id104 . -6) (undo-tree-id105 . -6) (undo-tree-id106 . -6) (undo-tree-id107 . -6) (undo-tree-id108 . -6) (undo-tree-id109 . -6) (undo-tree-id110 . -6) (undo-tree-id111 . -6) (undo-tree-id112 . -6) (undo-tree-id113 . -6) (undo-tree-id114 . -6) (undo-tree-id115 . -6) (undo-tree-id116 . -6) (undo-tree-id117 . -6) (undo-tree-id118 . -6) (undo-tree-id119 . -6) (undo-tree-id120 . -6) (undo-tree-id121 . -6) (undo-tree-id122 . -6) (undo-tree-id123 . -6) (undo-tree-id124 . -6) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) (undo-tree-id159 . -2) (undo-tree-id160 . -2) (undo-tree-id161 . -2) (undo-tree-id162 . -2) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) (undo-tree-id167 . -2) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (undo-tree-id178 . -2) (undo-tree-id179 . -2) (undo-tree-id180 . -2) (undo-tree-id181 . -2) (undo-tree-id182 . -2) (undo-tree-id183 . -2) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) (undo-tree-id188 . -2) (undo-tree-id189 . -2) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) (undo-tree-id195 . -2) (undo-tree-id196 . -2) (undo-tree-id197 . -2) (undo-tree-id198 . -2) (undo-tree-id199 . -2) (undo-tree-id200 . -2) (undo-tree-id201 . -2) (undo-tree-id202 . -2) (undo-tree-id203 . -2) (undo-tree-id204 . -2) (undo-tree-id205 . -2) (undo-tree-id206 . -2) (undo-tree-id207 . -2) (undo-tree-id208 . -2) 7698 (t 25331 2907 729116 848000)) ((7696 . 7702) (#("
" 0 1 (fontified nil)) . 7696) (undo-tree-id209 . 1) (#("    " 0 4 (fontified nil)) . 7696) (undo-tree-id210 . -4) (undo-tree-id211 . -4) (#("<" 0 1 (fontified t)) . 7700)) (25331 2909 803880 887000) 0 nil])
([nil nil ((7698 . 7702) (t 25331 2911 352430 299000)) nil (25331 2936 165347 827000) 0 nil])
nil
([nil nil ((#("tol " 0 4 (fontified t)) . -7608) (undo-tree-id383 . -4) 7612 (#("= " 0 2 (fontified t)) . -7612) (undo-tree-id384 . -2) 7614 (#("nothing" 0 7 (fontified t)) . -7614) (undo-tree-id385 . -7) 7621 (#(", " 0 2 (fontified t)) . -7621) (undo-tree-id386 . -2) 7623) nil (25331 2936 165341 262000) 0 nil])
([nil nil ((7615 . 7616) (#("tol" 0 3 (fontified t)) . -7615) (undo-tree-id382 . -3) 7618) nil (25331 2936 165326 36000) 0 nil])
([nil nil ((7615 . 7622) (#("0" 0 1 (fontified t)) . 7615)) nil (25331 2936 165298 239000) 0 nil])
([nil nil ((7691 . 7692) (t 25331 2936 172294 101000)) nil (25331 2961 732124 300000) 0 nil])
([nil nil ((7707 . 7712) (7706 . 7707) (7705 . 7706) (#("\\varepsilon" 0 1 (fontified t syntax-table (1)) 1 11 (fontified t)) . 7705) (undo-tree-id388 . -11) 7716 (7711 . 7716) (7692 . 7711)) nil (25331 2961 732120 40000) 0 nil])
([nil nil ((7691 . 7695) (7685 . 7689) (7686 . 7687)) nil (25331 2961 732113 195000) 0 nil])
([nil nil ((7716 . 7717) (7695 . 7716)) nil (25331 2961 732108 935000) 0 nil])
([nil nil ((7742 . 7743) (#("a" 0 1 (fontified t)) . -7742) (undo-tree-id387 . -1) 7743 (7742 . 7743)) nil (25331 2961 732102 649000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7748 . 7749) (#("
" 0 1 (fontified nil)) . -7962) (7744 . 7963) 7742) nil (25331 2961 732068 846000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -7964) (undo-tree-id399 . -4) 7968 (7964 . 7968) (#("    " 0 4 (fontified nil)) . 7963) (undo-tree-id400 . -4) (7962 . 7968) (t 25331 2961 738820 473000)) nil (25331 3013 680473 552000) 0 nil])
([nil nil ((8006 . 8011) (8005 . 8006) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 8005) (undo-tree-id389 . -3) 8008 (7997 . 8008) (#("similar" 0 7 (fontified t)) . -7997) (undo-tree-id390 . -7) 8004 (7997 . 8004) (#("simu" 0 4 (fontified t)) . -7997) (undo-tree-id391 . -4) 8001 (7993 . 8001) (7988 . 7993) (7981 . 7988) (#("single " 0 7 (fontified t face font-lock-comment-face)) . -7981) (undo-tree-id392 . -7) 7988 (7981 . 7988) (#("symmetric " 0 10 (fontified t face font-lock-comment-face)) . -7981) (undo-tree-id393 . -10) 7991 (#("iterates" 0 8 (fontified t face font-lock-comment-face)) . -7991) (undo-tree-id394 . -8) 7999 (#("
" 0 1 (fontified t face font-lock-comment-face)) . -7999) (undo-tree-id395 . -1) 8000 (#("    " 0 4 (fontified t)) . -8000) (undo-tree-id396 . -4) 8004 (7999 . 8004) (7991 . 7999) (7970 . 7991) (#("iniitalize " 0 11 (fontified t face font-lock-comment-face)) . -7970) (undo-tree-id397 . -11) 7981 (7970 . 7981) (#("sym" 0 3 (fontified t face font-lock-comment-face)) . -7970) (undo-tree-id398 . -3) 7973 (7968 . 7973) (7964 . 7968)) nil (25331 3013 680453 159000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -8010) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) 8011 (t 25331 3013 688535 402000)) nil (25331 3014 946593 46000) 0 nil])
([nil nil ((8015 . 8025) (8010 . 8015) (t 25331 3014 955195 118000)) nil (25331 3022 962287 811000) 0 nil])
([nil nil ((#("    sum!(a, K)
" 0 14 (fontified t) 14 15 (fontified t)) . 8011) (undo-tree-id430 . -13) (undo-tree-id431 . 1) (undo-tree-id432 . -13) (undo-tree-id433 . -13) (undo-tree-id434 . 2) (undo-tree-id435 . -14) (undo-tree-id436 . 7) (undo-tree-id437 . -9) (undo-tree-id438 . -13) (undo-tree-id439 . -13) (undo-tree-id440 . -13) (undo-tree-id441 . -13) (undo-tree-id442 . -13) (undo-tree-id443 . -13) (undo-tree-id444 . -13) (undo-tree-id445 . -13) (undo-tree-id446 . -13) (undo-tree-id447 . -13) (undo-tree-id448 . -13) (undo-tree-id449 . -13) (undo-tree-id450 . -13) (undo-tree-id451 . -13) (undo-tree-id452 . -13) (undo-tree-id453 . -13) (undo-tree-id454 . -13) (undo-tree-id455 . -13) (undo-tree-id456 . -13) (undo-tree-id457 . -13) (undo-tree-id458 . -13) (undo-tree-id459 . -13) (undo-tree-id460 . -13) (undo-tree-id461 . -13) (undo-tree-id462 . -13) (undo-tree-id463 . -13) (undo-tree-id464 . -13) (undo-tree-id465 . -13) (undo-tree-id466 . -13) (undo-tree-id467 . -13) (undo-tree-id468 . -13) (undo-tree-id469 . -13) (undo-tree-id470 . -13) (undo-tree-id471 . -13) (undo-tree-id472 . -13) (undo-tree-id473 . -13) (undo-tree-id474 . -13) (undo-tree-id475 . -13) (undo-tree-id476 . -13) (undo-tree-id477 . -13) (undo-tree-id478 . -13) (undo-tree-id479 . -13) (undo-tree-id480 . -13) (undo-tree-id481 . -13) (undo-tree-id482 . -13) (undo-tree-id483 . -13) (undo-tree-id484 . -13) (undo-tree-id485 . -13) (undo-tree-id486 . -13) (undo-tree-id487 . -13) (undo-tree-id488 . -13) (undo-tree-id489 . -13) (undo-tree-id490 . -13) (undo-tree-id491 . -13) (undo-tree-id492 . -13) (undo-tree-id493 . -13) (undo-tree-id494 . -13) (undo-tree-id495 . -13) (undo-tree-id496 . -13) (undo-tree-id497 . -13) (undo-tree-id498 . -13) (undo-tree-id499 . -13) (undo-tree-id500 . -13) (undo-tree-id501 . -13) (undo-tree-id502 . -13) (undo-tree-id503 . -13) (undo-tree-id504 . -13) (undo-tree-id505 . -13) (undo-tree-id506 . -13) (undo-tree-id507 . -13) (undo-tree-id508 . -13) (undo-tree-id509 . -13) (undo-tree-id510 . -13) (undo-tree-id511 . -13) (undo-tree-id512 . -13) (undo-tree-id513 . -13) (undo-tree-id514 . -13) (undo-tree-id515 . -13) (undo-tree-id516 . -13) (undo-tree-id517 . -13) (undo-tree-id518 . -13) (undo-tree-id519 . -13) (undo-tree-id520 . -13) (undo-tree-id521 . -13) (undo-tree-id522 . -13) (undo-tree-id523 . -13) (undo-tree-id524 . -13) (undo-tree-id525 . -13) (undo-tree-id526 . -13) (undo-tree-id527 . -13) (undo-tree-id528 . -13) (undo-tree-id529 . -13) (undo-tree-id530 . -13) (undo-tree-id531 . -13) (undo-tree-id532 . -13) (undo-tree-id533 . -13) (undo-tree-id534 . -13) (undo-tree-id535 . -13) (undo-tree-id536 . -13) (undo-tree-id537 . -13) (undo-tree-id538 . -13) (undo-tree-id539 . -13) (undo-tree-id540 . -13) (undo-tree-id541 . -13) (undo-tree-id542 . -13) (undo-tree-id543 . -13) (undo-tree-id544 . -13) (undo-tree-id545 . -13) (undo-tree-id546 . -13) (undo-tree-id547 . -13) (undo-tree-id548 . -13) (undo-tree-id549 . -13) (undo-tree-id550 . -13) (undo-tree-id551 . -13) (undo-tree-id552 . -13) (undo-tree-id553 . -13) (undo-tree-id554 . -13) (undo-tree-id555 . -13) (undo-tree-id556 . -13) (undo-tree-id557 . -13) (undo-tree-id558 . -13) (undo-tree-id559 . -13) (undo-tree-id560 . -13) (undo-tree-id561 . -13) (undo-tree-id562 . -13) (undo-tree-id563 . -13) (undo-tree-id564 . -13) (undo-tree-id565 . -13) (undo-tree-id566 . -13) (undo-tree-id567 . -13) (undo-tree-id568 . -13) (undo-tree-id569 . -13) (undo-tree-id570 . -13) (undo-tree-id571 . -13) (undo-tree-id572 . -13) (undo-tree-id573 . -13) (undo-tree-id574 . -13) (undo-tree-id575 . -13) (undo-tree-id576 . -13) (undo-tree-id577 . -13) (undo-tree-id578 . -13) (undo-tree-id579 . -13) (undo-tree-id580 . -13) (undo-tree-id581 . -13) (undo-tree-id582 . -13) (undo-tree-id583 . -13) (undo-tree-id584 . -13) (undo-tree-id585 . -13) (undo-tree-id586 . -13) (undo-tree-id587 . -13) (undo-tree-id588 . -13) (undo-tree-id589 . -13) (undo-tree-id590 . -13) (undo-tree-id591 . -13) (undo-tree-id592 . -13) (undo-tree-id593 . -13) (undo-tree-id594 . -13) (undo-tree-id595 . -13) (undo-tree-id596 . -13) (undo-tree-id597 . -13) (undo-tree-id598 . -13) (undo-tree-id599 . -13) (undo-tree-id600 . -13) (undo-tree-id601 . -13) (undo-tree-id602 . -15) (undo-tree-id603 . -13) (undo-tree-id604 . -13) (undo-tree-id605 . -13) (undo-tree-id606 . -13) (undo-tree-id607 . -13) (undo-tree-id608 . -13) (undo-tree-id609 . -13) (undo-tree-id610 . -13) (undo-tree-id611 . -13) (undo-tree-id612 . -13) (undo-tree-id613 . -13) (undo-tree-id614 . -13) (undo-tree-id615 . -13) (undo-tree-id616 . -13) (undo-tree-id617 . -13) (undo-tree-id618 . -13) (undo-tree-id619 . -13) (undo-tree-id620 . -13) (undo-tree-id621 . -13) (undo-tree-id622 . -13) (undo-tree-id623 . -13) (undo-tree-id624 . -13) (undo-tree-id625 . -13) (undo-tree-id626 . -13) (undo-tree-id627 . -13) (undo-tree-id628 . -13) (undo-tree-id629 . -13) (undo-tree-id630 . -13) (undo-tree-id631 . -13) (undo-tree-id632 . -13) 8024 (t 25331 3022 968484 479000)) nil (25331 3029 294379 673000) 0 nil])
([nil nil ((8033 . 8038) (8018 . 8033) (8015 . 8018) (#("is" 0 2 (fontified t)) . -8015) (undo-tree-id678 . -2) 8017 (8015 . 8017) (8010 . 8015) (t 25331 3029 301783 58000)) nil (25331 3065 238124 297000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -8011) (undo-tree-id677 . -4) 8015 (8010 . 8015)) nil (25331 3065 238118 151000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 8011) (undo-tree-id676 . 1)) nil (25331 3065 238113 402000) 0 nil])
([nil nil ((7996 . 7998) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -7996) (undo-tree-id674 . -1) (#("h" 0 1 (fontified t face font-lock-comment-face)) . -7997) (undo-tree-id675 . -1) 7998 (7988 . 7998)) nil (25331 3065 238108 234000) 0 nil])
([nil nil ((8094 . 8107) (8073 . 8094) (8068 . 8073) (8060 . 8068) (#(" " 0 1 (fontified t)) . -8060) (undo-tree-id670 . -1) 8061 (#("-=" 0 2 (fontified t)) . -8061) (undo-tree-id671 . -2) 8063 (#(" " 0 1 (fontified t)) . -8063) (undo-tree-id672 . -1) 8064 (8054 . 8064) (8049 . 8054) (8045 . 8049) (#("    " 0 4 (fontified nil)) . 8044) (undo-tree-id673 . -4) (8048 . 8049)) nil (25331 3065 238099 294000) 0 nil])
([nil nil ((#("    _maxiter = maxiter === nothing ? 1
" 0 27 (fontified t) 27 34 (fontified t face font-lock-constant-face) 34 38 (fontified t) 38 39 (fontified t)) . 8069) (undo-tree-id663 . -37) (undo-tree-id664 . 1) (undo-tree-id665 . -37) (undo-tree-id666 . -37) (undo-tree-id667 . -37) (undo-tree-id668 . -37) (undo-tree-id669 . -37) 8106) nil (25331 3065 238086 792000) 0 nil])
([nil nil ((#("nothing" 0 7 (fontified t face font-lock-constant-face)) . 7650) (undo-tree-id636 . -7) (undo-tree-id637 . -7) (undo-tree-id638 . -7) (undo-tree-id639 . -7) (undo-tree-id640 . -7) (undo-tree-id641 . -7) (undo-tree-id642 . -7) (undo-tree-id643 . -7) (undo-tree-id644 . -7) (undo-tree-id645 . -7) (undo-tree-id646 . -7) (undo-tree-id647 . -7) (undo-tree-id648 . -7) (undo-tree-id649 . -7) (undo-tree-id650 . -7) (undo-tree-id651 . -7) (undo-tree-id652 . -7) (undo-tree-id653 . -7) (undo-tree-id654 . -7) (undo-tree-id655 . -7) (undo-tree-id656 . -7) (undo-tree-id657 . -7) (undo-tree-id658 . -7) (undo-tree-id659 . -7) (undo-tree-id660 . -7) (undo-tree-id661 . -7) (undo-tree-id662 . -7)) nil (25331 3065 238069 751000) 0 nil])
([nil nil ((7650 . 7655) (#(" " 0 1 (fontified t)) . -7650) (undo-tree-id633 . -1) (#("1" 0 1 (fontified t)) . -7651) (undo-tree-id634 . -1) (#("_" 0 1 (fontified t)) . -7652) (undo-tree-id635 . -1) 7653 (7650 . 7653)) nil (25331 3065 237989 14000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -8067) (undo-tree-id681 . -4) 8071 (8066 . 8071) (t 25331 3065 248252 471000)) nil (25331 3088 420840 826000) 0 nil])
([nil nil ((8102 . 8105) (8094 . 8102) (#("        " 0 8 (fontified nil)) . 8093) (undo-tree-id679 . -8) (8092 . 8102) (8076 . 8092) (#(" " 0 1 (fontified t)) . -8076) (undo-tree-id680 . -1) 8077 (8071 . 8077) (8067 . 8071)) nil (25331 3088 420831 328000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -8098) (8094 . 8098) 8104) nil (25331 3088 420799 410000) 0 nil])
([nil nil ((8093 . 8101) (t 25331 3088 428125 272000)) nil (25331 3093 988220 128000) 0 nil])
([nil nil ((7647 . 7652)) nil (25331 3093 988209 23000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 8098) (undo-tree-id687 . -7) (undo-tree-id688 . -7) (undo-tree-id689 . -7) (undo-tree-id690 . -7) (undo-tree-id691 . -7) (undo-tree-id692 . -7) 8105 (t 25331 3093 998094 708000)) nil (25331 3122 522342 398000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -8098) (undo-tree-id686 . -8) 8106 (8097 . 8106)) nil (25331 3122 522330 455000) 0 nil])
([nil nil ((8143 . 8145) (#("=" 0 1 (fontified t)) . -8143) (undo-tree-id682 . -1) (#(" " 0 1 (fontified t)) . -8144) (undo-tree-id683 . -1) (#("0" 0 1 (fontified t)) . -8145) (undo-tree-id684 . -1) 8146 (8135 . 8146) (8114 . 8135) (8108 . 8114) (#("h" 0 1 (fontified t)) . -8108) (undo-tree-id685 . -1) 8109 (8106 . 8109) (8098 . 8106)) nil (25331 3122 522315 230000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -8146) (undo-tree-id693 . -8) (undo-tree-id694 . -8) (undo-tree-id695 . -8) (undo-tree-id696 . -8) (undo-tree-id697 . -8) (undo-tree-id698 . -8) (undo-tree-id699 . -8) (undo-tree-id700 . -8) (undo-tree-id701 . -8) (undo-tree-id702 . -8) (undo-tree-id703 . -8) (undo-tree-id704 . -8) (undo-tree-id705 . -8) (undo-tree-id706 . -8) (undo-tree-id707 . -8) (undo-tree-id708 . -8) (undo-tree-id709 . -8) (undo-tree-id710 . -8) (undo-tree-id711 . -8) (undo-tree-id712 . -8) (undo-tree-id713 . -8) (undo-tree-id714 . -8) (undo-tree-id715 . -8) (undo-tree-id716 . -8) (undo-tree-id717 . -8) (undo-tree-id718 . -8) (undo-tree-id719 . -8) (undo-tree-id720 . -8) (undo-tree-id721 . -8) 8154 (8145 . 8154) (t 25331 3122 531271 467000)) nil (25331 3123 601402 205000) 0 nil])
([nil nil ((8194 . 8207) (8177 . 8194) (8164 . 8177) (8154 . 8164) (8145 . 8154) (#("
" 0 1 (fontified t)) . -8145) (undo-tree-id729 . -1) (undo-tree-id730 . -1) 8146 (t 25331 3123 607932 225000)) nil (25331 3134 800866 803000) 0 nil])
([nil nil ((#("            
" 0 12 (fontified t) 12 13 (fontified t)) . 8195) (undo-tree-id722 . -11) (undo-tree-id723 . 1) (undo-tree-id724 . -11) (undo-tree-id725 . -11) (undo-tree-id726 . -11) (undo-tree-id727 . -11) (undo-tree-id728 . -11) 8206) nil (25331 3134 800852 485000) 0 nil])
([nil nil ((8207 . 8210) (8194 . 8207) (t 25331 3134 807870 766000)) nil (25331 3137 323730 86000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -8203) (undo-tree-id731 . -12) (undo-tree-id732 . -12) (undo-tree-id733 . -12) (undo-tree-id734 . -12) (undo-tree-id735 . -12) (undo-tree-id736 . -12) (undo-tree-id737 . -12) (undo-tree-id738 . -12) (undo-tree-id739 . -12) (undo-tree-id740 . -12) (undo-tree-id741 . -12) (undo-tree-id742 . -12) (undo-tree-id743 . -12) (undo-tree-id744 . -12) (undo-tree-id745 . -12) (undo-tree-id746 . -12) (undo-tree-id747 . -12) (undo-tree-id748 . -12) (undo-tree-id749 . -12) (undo-tree-id750 . -12) (undo-tree-id751 . -12) (undo-tree-id752 . -12) (undo-tree-id753 . -12) (undo-tree-id754 . -12) (undo-tree-id755 . -12) (undo-tree-id756 . -12) (undo-tree-id757 . -12) (8195 . 8203) 8209) nil (25331 3137 323718 213000) 0 nil])
([nil nil ((#("~" 0 1 (fontified t)) . -8224) (undo-tree-id758 . -1) 8225 (8220 . 8225) (8216 . 8220) (#("    " 0 4 (fontified nil)) . 8215) (undo-tree-id759 . -4) (8214 . 8220) (t 25331 3137 331190 253000)) nil (25331 3159 463920 715000) 0 nil])
([nil nil ((8225 . 8233) (8224 . 8225)) nil (25331 3159 463888 798000) 0 nil])
([nil nil ((8051 . 8067) (8046 . 8051) (t 25331 3159 474402 77000)) nil (25331 3199 110815 482000) 0 nil])
([nil nil ((8246 . 8249) (#("a" 0 1 (fontified t)) . 8246) (t 25331 3199 120851 186000)) nil (25331 3219 889374 120000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 8236) (undo-tree-id760 . -1) (t 25331 3219 900737 157000)) nil (25331 3248 216903 422000) 0 nil])
([nil nil ((#("        if ischeck
            copyto!(a_old, a)
        end
" 0 8 (fontified t) 8 10 (fontified t face font-lock-keyword-face) 10 19 (fontified t) 19 49 (fontified t) 49 57 (fontified t) 57 60 (fontified t face font-lock-keyword-face) 60 61 (fontified t)) . 8167) (undo-tree-id975 . -59) (undo-tree-id976 . -59) (undo-tree-id977 . -10) (undo-tree-id978 . -10) (undo-tree-id979 . -10) (undo-tree-id980 . -59) 8177 (t 25331 3221 557394 733000)) nil (25331 3252 98144 862000) 0 nil] [nil nil ((#("        if ischeck
            copyto!(a_old, a)
        end
" 0 8 (fontified t) 8 10 (fontified t face font-lock-keyword-face) 10 19 (fontified t) 19 49 (fontified t) 49 57 (fontified t) 57 60 (fontified t face font-lock-keyword-face) 60 61 (fontified t)) . 8167) (undo-tree-id767 . -59) (undo-tree-id768 . -10) (undo-tree-id769 . -59) (undo-tree-id770 . -59) (undo-tree-id771 . -59) (undo-tree-id772 . -59) (undo-tree-id773 . -59) (undo-tree-id774 . -59) (undo-tree-id775 . -59) (undo-tree-id776 . -59) (undo-tree-id777 . -59) (undo-tree-id778 . -59) (undo-tree-id779 . -59) (undo-tree-id780 . -59) (undo-tree-id781 . -59) (undo-tree-id782 . -59) (undo-tree-id783 . -59) (undo-tree-id784 . -59) (undo-tree-id785 . -59) (undo-tree-id786 . -59) (undo-tree-id787 . -59) (undo-tree-id788 . -59) (undo-tree-id789 . -59) (undo-tree-id790 . -59) (undo-tree-id791 . -59) (undo-tree-id792 . -59) (undo-tree-id793 . -59) (undo-tree-id794 . -59) (undo-tree-id795 . -59) (undo-tree-id796 . -59) (undo-tree-id797 . -59) (undo-tree-id798 . -59) (undo-tree-id799 . -59) (undo-tree-id800 . -59) (undo-tree-id801 . -59) (undo-tree-id802 . -59) (undo-tree-id803 . -59) (undo-tree-id804 . -59) (undo-tree-id805 . -59) (undo-tree-id806 . -59) (undo-tree-id807 . -59) (undo-tree-id808 . -59) (undo-tree-id809 . -59) (undo-tree-id810 . -59) (undo-tree-id811 . -59) (undo-tree-id812 . -59) (undo-tree-id813 . -59) (undo-tree-id814 . -59) (undo-tree-id815 . -59) (undo-tree-id816 . -59) (undo-tree-id817 . -59) (undo-tree-id818 . -59) (undo-tree-id819 . -59) (undo-tree-id820 . -59) (undo-tree-id821 . -59) (undo-tree-id822 . -59) (undo-tree-id823 . -59) (undo-tree-id824 . -59) (undo-tree-id825 . -29) (undo-tree-id826 . -29) (undo-tree-id827 . -29) (undo-tree-id828 . -29) (undo-tree-id829 . -29) (undo-tree-id830 . -29) (undo-tree-id831 . -29) (undo-tree-id832 . -29) (undo-tree-id833 . -29) (undo-tree-id834 . -29) (undo-tree-id835 . -29) (undo-tree-id836 . -29) (undo-tree-id837 . -29) (undo-tree-id838 . -29) (undo-tree-id839 . -29) (undo-tree-id840 . -29) (undo-tree-id841 . -29) (undo-tree-id842 . -29) (undo-tree-id843 . -29) (undo-tree-id844 . -29) (undo-tree-id845 . -29) (undo-tree-id846 . -29) (undo-tree-id847 . -29) (undo-tree-id848 . -29) (undo-tree-id849 . -29) (undo-tree-id850 . -29) (undo-tree-id851 . -29) (undo-tree-id852 . -10) (undo-tree-id853 . -10) (undo-tree-id854 . -10) (undo-tree-id855 . -10) (undo-tree-id856 . -10) (undo-tree-id857 . -10) (undo-tree-id858 . -10) (undo-tree-id859 . -10) (undo-tree-id860 . -10) (undo-tree-id861 . -10) (undo-tree-id862 . -10) (undo-tree-id863 . -10) (undo-tree-id864 . -10) (undo-tree-id865 . -10) (undo-tree-id866 . -10) (undo-tree-id867 . -10) (undo-tree-id868 . -10) (undo-tree-id869 . -10) (undo-tree-id870 . -10) (undo-tree-id871 . -10) (undo-tree-id872 . -10) (undo-tree-id873 . -10) (undo-tree-id874 . -10) (undo-tree-id875 . -10) (undo-tree-id876 . -10) (undo-tree-id877 . -10) (undo-tree-id878 . -10) (undo-tree-id879 . -61) (undo-tree-id880 . -10) (undo-tree-id881 . -59) (undo-tree-id882 . -10) (undo-tree-id883 . -10) (undo-tree-id884 . -10) (undo-tree-id885 . -10) (undo-tree-id886 . -10) (undo-tree-id887 . -10) (undo-tree-id888 . -10) (undo-tree-id889 . -10) (undo-tree-id890 . -10) (undo-tree-id891 . -10) (undo-tree-id892 . -10) (undo-tree-id893 . -10) (undo-tree-id894 . -10) (undo-tree-id895 . -10) (undo-tree-id896 . -10) (undo-tree-id897 . -10) (undo-tree-id898 . -10) (undo-tree-id899 . -10) (undo-tree-id900 . -10) (undo-tree-id901 . -10) (undo-tree-id902 . -10) (undo-tree-id903 . -10) (undo-tree-id904 . -10) (undo-tree-id905 . -10) (undo-tree-id906 . -10) (undo-tree-id907 . -10) (undo-tree-id908 . -10) (undo-tree-id909 . -29) (undo-tree-id910 . -29) (undo-tree-id911 . -29) (undo-tree-id912 . -29) (undo-tree-id913 . -29) (undo-tree-id914 . -29) (undo-tree-id915 . -29) (undo-tree-id916 . -29) (undo-tree-id917 . -29) (undo-tree-id918 . -29) (undo-tree-id919 . -29) (undo-tree-id920 . -29) (undo-tree-id921 . -29) (undo-tree-id922 . -29) (undo-tree-id923 . -29) (undo-tree-id924 . -29) (undo-tree-id925 . -29) (undo-tree-id926 . -29) (undo-tree-id927 . -29) (undo-tree-id928 . -29) (undo-tree-id929 . -29) (undo-tree-id930 . -29) (undo-tree-id931 . -29) (undo-tree-id932 . -29) (undo-tree-id933 . -29) (undo-tree-id934 . -29) (undo-tree-id935 . -29) (undo-tree-id936 . -49) (undo-tree-id937 . -59) (undo-tree-id938 . -59) (undo-tree-id939 . -59) (undo-tree-id940 . -59) (undo-tree-id941 . -59) (undo-tree-id942 . -59) (undo-tree-id943 . -59) (undo-tree-id944 . -59) (undo-tree-id945 . -59) (undo-tree-id946 . -59) (undo-tree-id947 . -59) (undo-tree-id948 . -59) (undo-tree-id949 . -59) (undo-tree-id950 . -59) (undo-tree-id951 . -59) (undo-tree-id952 . -59) (undo-tree-id953 . -59) (undo-tree-id954 . -59) (undo-tree-id955 . -59) (undo-tree-id956 . -59) (undo-tree-id957 . -59) (undo-tree-id958 . -59) (undo-tree-id959 . -59) (undo-tree-id960 . -59) (undo-tree-id961 . -59) (undo-tree-id962 . -59) (undo-tree-id963 . -59) (undo-tree-id964 . -59) 8226 (t 25331 3221 557394 733000)) ((8167 . 8228)) (25331 3248 216116 591000) 0 nil] [nil nil ((#("        if ischeck
            copyto!(a_old, a)
        end
" 0 8 (fontified t) 8 10 (fontified t face font-lock-keyword-face) 10 19 (fontified t) 19 49 (fontified t) 49 57 (fontified t) 57 60 (fontified t face font-lock-keyword-face) 60 61 (fontified t)) . 8167) (undo-tree-id761 . -59) (undo-tree-id762 . -10) (undo-tree-id763 . -59) (undo-tree-id764 . -59) (undo-tree-id765 . -10) (undo-tree-id766 . -59) 8226 (t 25331 3221 557394 733000)) ((8167 . 8228)) (25331 3245 133537 701000) 0 nil])
([nil nil ((#("    mul!(tmp, K, a)
" 0 19 (fontified t) 19 20 (fontified t)) . 8175) (undo-tree-id971 . 8) (undo-tree-id972 . -20) (undo-tree-id973 . -20) (undo-tree-id974 . -20)) nil (25331 3252 98129 8000) 0 nil])
nil
nil
([nil nil ((nil rear-nonsticky nil 8170 . 8171) (#("
" 0 1 (fontified nil)) . -8186) (8166 . 8187) 8119) nil (25331 3252 98119 859000) 0 nil])
([nil nil ((#("    " 0 3 (fontified nil) 3 4 (fontified nil rear-nonsticky t)) . -8175) (undo-tree-id965 . -4) (undo-tree-id966 . -4) (undo-tree-id967 . -4) (undo-tree-id968 . -4) (undo-tree-id969 . -4) (undo-tree-id970 . -4) (8167 . 8175) 8171) nil (25331 3252 98109 592000) 0 nil])
([nil nil ((#("    a_old = similar(a)
" 0 23 (fontified t)) . 8024) (undo-tree-id981 . -15) (undo-tree-id982 . -15) (undo-tree-id983 . -15) (undo-tree-id984 . -15) (undo-tree-id985 . -15) (undo-tree-id986 . -15) (undo-tree-id987 . -15) (undo-tree-id988 . -15) (undo-tree-id989 . -15) (undo-tree-id990 . -15) (undo-tree-id991 . -15) (undo-tree-id992 . -15) (undo-tree-id993 . -15) (undo-tree-id994 . -15) (undo-tree-id995 . -15) (undo-tree-id996 . -15) (undo-tree-id997 . -15) (undo-tree-id998 . -15) (undo-tree-id999 . -15) (undo-tree-id1000 . -15) (undo-tree-id1001 . -15) (undo-tree-id1002 . -15) (undo-tree-id1003 . -15) (undo-tree-id1004 . -15) (undo-tree-id1005 . -15) (undo-tree-id1006 . -15) (undo-tree-id1007 . -15) (undo-tree-id1008 . -15) (undo-tree-id1009 . -15) (undo-tree-id1010 . -15) (undo-tree-id1011 . -15) (undo-tree-id1012 . -23) (undo-tree-id1013 . -15) (undo-tree-id1014 . -15) (undo-tree-id1015 . -15) (undo-tree-id1016 . -15) (undo-tree-id1017 . -15) (undo-tree-id1018 . -15) (undo-tree-id1019 . -15) (undo-tree-id1020 . -15) (undo-tree-id1021 . -15) (undo-tree-id1022 . -15) (undo-tree-id1023 . -15) (undo-tree-id1024 . -15) (undo-tree-id1025 . -15) (undo-tree-id1026 . -15) (undo-tree-id1027 . -15) (undo-tree-id1028 . -15) (undo-tree-id1029 . -15) (undo-tree-id1030 . -15) (undo-tree-id1031 . -15) (undo-tree-id1032 . -15) (undo-tree-id1033 . -15) (undo-tree-id1034 . -15) (undo-tree-id1035 . -15) (undo-tree-id1036 . -15) (undo-tree-id1037 . -15) (undo-tree-id1038 . -15) (undo-tree-id1039 . -15) (undo-tree-id1040 . -15) (undo-tree-id1041 . -15) (undo-tree-id1042 . -15) 8039 (t 25331 3252 110560 407000)) nil (25331 3260 583882 793000) 0 nil])
([nil nil ((8194 . 8195) (8193 . 8194) (#("\\varepsilon" 0 1 (fontified t syntax-table (1)) 1 11 (fontified t)) . 8193) (undo-tree-id1070 . -11) (undo-tree-id1071 . -9) (undo-tree-id1072 . -9) (undo-tree-id1073 . -9) (undo-tree-id1074 . -9) (undo-tree-id1075 . -9) (undo-tree-id1076 . -9) (undo-tree-id1077 . -9) (undo-tree-id1078 . -9) (undo-tree-id1079 . -9) (undo-tree-id1080 . -9) (undo-tree-id1081 . -9) (undo-tree-id1082 . -9) (undo-tree-id1083 . -9) (undo-tree-id1084 . -9) (undo-tree-id1085 . -9) (undo-tree-id1086 . -9) (undo-tree-id1087 . -9) (undo-tree-id1088 . -9) (undo-tree-id1089 . -9) (undo-tree-id1090 . -9) (undo-tree-id1091 . -9) (undo-tree-id1092 . -9) (undo-tree-id1093 . -9) (undo-tree-id1094 . -9) (undo-tree-id1095 . -9) (undo-tree-id1096 . -9) (undo-tree-id1097 . -9) (undo-tree-id1098 . -10) (undo-tree-id1099 . -10) (undo-tree-id1100 . -10) (undo-tree-id1101 . -10) (undo-tree-id1102 . -10) (undo-tree-id1103 . -10) (undo-tree-id1104 . -10) (undo-tree-id1105 . -10) (undo-tree-id1106 . -10) (undo-tree-id1107 . -10) (undo-tree-id1108 . -10) (undo-tree-id1109 . -10) (undo-tree-id1110 . -10) (undo-tree-id1111 . -10) (undo-tree-id1112 . -10) (undo-tree-id1113 . -10) (undo-tree-id1114 . -10) (undo-tree-id1115 . -10) (undo-tree-id1116 . -10) (undo-tree-id1117 . -10) (undo-tree-id1118 . -10) (undo-tree-id1119 . -10) (undo-tree-id1120 . -10) (undo-tree-id1121 . -10) (undo-tree-id1122 . -10) (undo-tree-id1123 . -10) (undo-tree-id1124 . -10) (undo-tree-id1125 . -11) (undo-tree-id1126 . -11) (undo-tree-id1127 . -11) (undo-tree-id1128 . -11) (undo-tree-id1129 . -11) (undo-tree-id1130 . -11) (undo-tree-id1131 . -11) (undo-tree-id1132 . -11) (undo-tree-id1133 . -11) (undo-tree-id1134 . -11) (undo-tree-id1135 . -11) (undo-tree-id1136 . -11) (undo-tree-id1137 . -11) (undo-tree-id1138 . -11) (undo-tree-id1139 . -11) (undo-tree-id1140 . -11) (undo-tree-id1141 . -11) (undo-tree-id1142 . -11) (undo-tree-id1143 . -11) (undo-tree-id1144 . -11) (undo-tree-id1145 . -11) (undo-tree-id1146 . -11) (undo-tree-id1147 . -11) (undo-tree-id1148 . -11) (undo-tree-id1149 . -11) (undo-tree-id1150 . -11) (undo-tree-id1151 . -11) (undo-tree-id1152 . -11) (undo-tree-id1153 . -11) (undo-tree-id1154 . -11) (undo-tree-id1155 . -11) (undo-tree-id1156 . -11) (undo-tree-id1157 . -11) (undo-tree-id1158 . -11) (undo-tree-id1159 . -11) (undo-tree-id1160 . -11) (undo-tree-id1161 . -11) (undo-tree-id1162 . -11) (undo-tree-id1163 . -11) (undo-tree-id1164 . -11) (undo-tree-id1165 . -11) (undo-tree-id1166 . -11) (undo-tree-id1167 . -11) (undo-tree-id1168 . -11) (undo-tree-id1169 . -11) (undo-tree-id1170 . -11) (undo-tree-id1171 . -11) (undo-tree-id1172 . -11) (undo-tree-id1173 . -11) (undo-tree-id1174 . -11) (undo-tree-id1175 . -11) (undo-tree-id1176 . -11) (undo-tree-id1177 . -11) (undo-tree-id1178 . -11) (undo-tree-id1179 . -11) 8204 (8191 . 8204) (8190 . 8191) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 8190) (undo-tree-id1180 . -3) 8193 (8186 . 8193) (8176 . 8186) (8167 . 8176) (t 25331 3260 593847 189000)) nil (25331 3276 714441 431000) 0 nil])
([nil nil ((8187 . 8190) (#("a" 0 1 (fontified t)) . 8187) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1)) nil (25331 3276 714304 262000) 0 nil])
([nil nil ((8218 . 8222) (8207 . 8218) (8199 . 8207) (#("        " 0 8 (fontified nil)) . 8198) (undo-tree-id1181 . -8) (8197 . 8207) (t 25331 3276 727091 992000)) nil (25331 3309 818387 906000) 0 nil])
([nil nil ((8230 . 8233) (8218 . 8230) (#("            " 0 12 (fontified nil)) . 8217) (undo-tree-id1209 . -12) (undo-tree-id1210 . -12) (undo-tree-id1211 . -12) (undo-tree-id1212 . -12) (undo-tree-id1213 . -12) (undo-tree-id1214 . -12) (undo-tree-id1215 . -12) (undo-tree-id1216 . -12) (undo-tree-id1217 . -12) (undo-tree-id1218 . -12) (undo-tree-id1219 . -12) (undo-tree-id1220 . -12) (undo-tree-id1221 . -12) (undo-tree-id1222 . -12) (8216 . 8230) (8206 . 8216) (8198 . 8206) (t 25331 3309 830243 674000)) nil (25331 3313 543624 586000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -8226) (undo-tree-id1182 . -12) (undo-tree-id1183 . -12) (undo-tree-id1184 . -12) (undo-tree-id1185 . -12) (undo-tree-id1186 . -12) (undo-tree-id1187 . -12) (undo-tree-id1188 . -12) (undo-tree-id1189 . -12) (undo-tree-id1190 . -12) (undo-tree-id1191 . -12) (undo-tree-id1192 . -12) (undo-tree-id1193 . -12) (undo-tree-id1194 . -12) (undo-tree-id1195 . -12) (undo-tree-id1196 . -12) (undo-tree-id1197 . -12) (undo-tree-id1198 . -12) (undo-tree-id1199 . -12) (undo-tree-id1200 . -12) (undo-tree-id1201 . -12) (undo-tree-id1202 . -12) (undo-tree-id1203 . -12) (undo-tree-id1204 . -12) (undo-tree-id1205 . -12) (undo-tree-id1206 . -12) (undo-tree-id1207 . -12) (undo-tree-id1208 . -12) (8218 . 8226) 8232) nil (25331 3313 543593 577000) 0 nil])
([nil nil ((8291 . 8294) (8283 . 8291) (#("        " 0 8 (fontified nil)) . 8282) (undo-tree-id1396 . -8) (8281 . 8291) (8266 . 8281) (8262 . 8266) (#("
" 0 1 (fontified t)) . -8262) (undo-tree-id1397 . -1) (#(" " 0 1 (fontified t)) . -8263) (undo-tree-id1398 . -1) (#(" " 0 1 (fontified t)) . -8264) (undo-tree-id1399 . -1) (#(" " 0 1 (fontified t)) . -8265) (undo-tree-id1400 . -1) (#(" " 0 1 (fontified t)) . -8266) (undo-tree-id1401 . -1) 8267 (8263 . 8267) (#("    " 0 4 (fontified nil)) . 8262) (undo-tree-id1402 . -4) (8266 . 8267) (#("re" 0 2 (fontified t)) . -8266) (undo-tree-id1403 . -2) 8268 (8266 . 8268) (8261 . 8266) (t 25331 3313 553556 576000)) nil (25331 3348 309747 775000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -8287) (8283 . 8287) 8293) nil (25331 3348 309717 743000) 0 nil])
([nil nil ((8291 . 8308) (#("warn " 0 4 (fontified t face julia-macro-face) 4 5 (fontified t)) . -8291) (undo-tree-id1395 . -5) 8296 (8290 . 8296) (8282 . 8290)) nil (25331 3348 309712 924000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8316 . 8317) (#("
" 0 1 (fontified nil)) . -8380) (8308 . 8381) 8307) nil (25331 3348 309706 639000) 0 nil])
([nil nil ((#("        @warn \"Sinkhorn al
" 0 8 (fontified t) 8 13 (fontified t face julia-macro-face) 13 14 (fontified t) 14 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face)) . 8282) (undo-tree-id1223 . -8) (undo-tree-id1224 . -8) (undo-tree-id1225 . -8) (undo-tree-id1226 . -27) (undo-tree-id1227 . -25) (undo-tree-id1228 . -8) (undo-tree-id1229 . -25) (undo-tree-id1230 . -25) (undo-tree-id1231 . -25) (undo-tree-id1232 . -25) (undo-tree-id1233 . -25) (undo-tree-id1234 . -25) (undo-tree-id1235 . -25) (undo-tree-id1236 . -25) (undo-tree-id1237 . -25) (undo-tree-id1238 . -25) (undo-tree-id1239 . -25) (undo-tree-id1240 . -25) (undo-tree-id1241 . -25) (undo-tree-id1242 . -25) (undo-tree-id1243 . -25) (undo-tree-id1244 . -25) (undo-tree-id1245 . -25) (undo-tree-id1246 . -25) (undo-tree-id1247 . -25) (undo-tree-id1248 . -25) (undo-tree-id1249 . -25) (undo-tree-id1250 . -25) (undo-tree-id1251 . -25) (undo-tree-id1252 . -25) (undo-tree-id1253 . -25) (undo-tree-id1254 . -25) (undo-tree-id1255 . -25) (undo-tree-id1256 . -25) (undo-tree-id1257 . -25) (undo-tree-id1258 . -25) (undo-tree-id1259 . -25) (undo-tree-id1260 . -25) (undo-tree-id1261 . -25) (undo-tree-id1262 . -25) (undo-tree-id1263 . -25) (undo-tree-id1264 . -25) (undo-tree-id1265 . -25) (undo-tree-id1266 . -25) (undo-tree-id1267 . -25) (undo-tree-id1268 . -25) (undo-tree-id1269 . -25) (undo-tree-id1270 . -25) (undo-tree-id1271 . -25) (undo-tree-id1272 . -25) (undo-tree-id1273 . -25) (undo-tree-id1274 . -25) (undo-tree-id1275 . -25) (undo-tree-id1276 . -25) (undo-tree-id1277 . -25) (undo-tree-id1278 . -25) (undo-tree-id1279 . -25) (undo-tree-id1280 . -25) (undo-tree-id1281 . -25) (undo-tree-id1282 . -25) (undo-tree-id1283 . -25) (undo-tree-id1284 . -25) (undo-tree-id1285 . -25) (undo-tree-id1286 . -25) (undo-tree-id1287 . -25) (undo-tree-id1288 . -25) (undo-tree-id1289 . -25) (undo-tree-id1290 . -25) (undo-tree-id1291 . -25) (undo-tree-id1292 . -25) (undo-tree-id1293 . -25) (undo-tree-id1294 . -25) (undo-tree-id1295 . -25) (undo-tree-id1296 . -25) (undo-tree-id1297 . -25) (undo-tree-id1298 . -25) (undo-tree-id1299 . -25) (undo-tree-id1300 . -25) (undo-tree-id1301 . -25) (undo-tree-id1302 . -25) (undo-tree-id1303 . -25) (undo-tree-id1304 . -25) (undo-tree-id1305 . -25) (undo-tree-id1306 . -25) (undo-tree-id1307 . -25) (undo-tree-id1308 . -25) (undo-tree-id1309 . -25) (undo-tree-id1310 . -25) (undo-tree-id1311 . -25) (undo-tree-id1312 . -25) (undo-tree-id1313 . -25) (undo-tree-id1314 . -25) (undo-tree-id1315 . -25) (undo-tree-id1316 . -25) (undo-tree-id1317 . -25) (undo-tree-id1318 . -25) (undo-tree-id1319 . -25) (undo-tree-id1320 . -25) (undo-tree-id1321 . -25) (undo-tree-id1322 . -25) (undo-tree-id1323 . -25) (undo-tree-id1324 . -25) (undo-tree-id1325 . -25) (undo-tree-id1326 . -25) (undo-tree-id1327 . -25) (undo-tree-id1328 . -25) (undo-tree-id1329 . -25) (undo-tree-id1330 . -25) (undo-tree-id1331 . -25) (undo-tree-id1332 . -25) (undo-tree-id1333 . -25) (undo-tree-id1334 . -25) (undo-tree-id1335 . -25) (undo-tree-id1336 . -25) (undo-tree-id1337 . -8) (undo-tree-id1338 . -8) (undo-tree-id1339 . -8) (undo-tree-id1340 . -8) (undo-tree-id1341 . -8) (undo-tree-id1342 . -8) (undo-tree-id1343 . -8) (undo-tree-id1344 . -8) (undo-tree-id1345 . -8) (undo-tree-id1346 . -8) (undo-tree-id1347 . -8) (undo-tree-id1348 . -8) (undo-tree-id1349 . -8) (undo-tree-id1350 . -8) (undo-tree-id1351 . -8) (undo-tree-id1352 . -8) (undo-tree-id1353 . -8) (undo-tree-id1354 . -8) (undo-tree-id1355 . -8) (undo-tree-id1356 . -8) (undo-tree-id1357 . -8) (undo-tree-id1358 . -8) (undo-tree-id1359 . -8) (undo-tree-id1360 . -8) (undo-tree-id1361 . -8) (undo-tree-id1362 . -8) (undo-tree-id1363 . -8) (undo-tree-id1364 . -27) (undo-tree-id1365 . -8) (undo-tree-id1366 . -8) (undo-tree-id1367 . -8) (undo-tree-id1368 . -8) (undo-tree-id1369 . -8) (undo-tree-id1370 . -8) (undo-tree-id1371 . -8) (undo-tree-id1372 . -8) (undo-tree-id1373 . -8) (undo-tree-id1374 . -8) (undo-tree-id1375 . -8) (undo-tree-id1376 . -8) (undo-tree-id1377 . -8) (undo-tree-id1378 . -8) (undo-tree-id1379 . -8) (undo-tree-id1380 . -8) (undo-tree-id1381 . -8) (undo-tree-id1382 . -8) (undo-tree-id1383 . -8) (undo-tree-id1384 . -8) (undo-tree-id1385 . -8) (undo-tree-id1386 . -8) (undo-tree-id1387 . -8) (undo-tree-id1388 . -8) (undo-tree-id1389 . -8) (undo-tree-id1390 . -8) (undo-tree-id1391 . -8) (undo-tree-id1392 . -8) (undo-tree-id1393 . -8) (undo-tree-id1394 . -8) 8290) nil (25331 3348 309684 778000) 0 nil])
([nil nil ((8217 . 8229) (t 25331 3348 320032 463000)) nil (25331 3379 835923 35000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8241 . 8242) (#("
" 0 1 (fontified nil)) . -8282) (8229 . 8283) 8228) nil (25331 3379 835919 753000) 0 nil])
([nil nil ((#("            
" 0 12 (fontified t) 12 13 (fontified t)) . 8217) (undo-tree-id1417 . -11) (undo-tree-id1418 . -11) (undo-tree-id1419 . -11) (undo-tree-id1420 . -13) (undo-tree-id1421 . -11) (undo-tree-id1422 . -11) (undo-tree-id1423 . -11) (undo-tree-id1424 . -11) 8228) nil (25331 3379 835915 981000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 8237)) nil (25331 3379 835899 499000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . 8237)) nil (25331 3379 835897 124000) 0 nil])
([nil nil ((#("+ sum(abs2, b)" 0 14 (fontified t)) . 8253) (undo-tree-id1407 . -13) (undo-tree-id1408 . -13) (undo-tree-id1409 . -14) (undo-tree-id1410 . -13) (undo-tree-id1411 . -13) (undo-tree-id1412 . 1) (undo-tree-id1413 . -14) (undo-tree-id1414 . 9) (undo-tree-id1415 . -6) (undo-tree-id1416 . -5) 8266) nil (25331 3379 835893 283000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -8251) (undo-tree-id1404 . -1) (undo-tree-id1405 . 1) (undo-tree-id1406 . -1) 8252) nil (25331 3379 835875 962000) 0 nil])
([nil nil ((8251 . 8252)) nil (25331 3379 835846 420000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8265 . 8266) (#("
" 0 1 (fontified nil)) . -8318) (8253 . 8319) 8251 (t 25331 3379 846526 130000)) nil (25331 3384 473808 62000) 0 nil])
([nil nil ((8250 . 8253) (#("a" 0 1 (fontified t)) . -8250) (undo-tree-id1425 . -1) 8251 (t 25331 3384 483167 353000)) nil (25331 3389 155677 175000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 8276) (t 25331 3389 166474 987000)) nil (25331 3400 518211 817000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . 8276)) nil (25331 3400 518209 512000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 8276)) nil (25331 3400 518207 556000) 0 nil])
([nil nil ((8276 . 8277)) nil (25331 3400 518203 715000) 0 nil])
([nil nil ((#("_old" 0 4 (fontified t)) . 8294) (undo-tree-id1681 . -3) (undo-tree-id1682 . -3) (undo-tree-id1683 . -3) (undo-tree-id1684 . -3) 8297) nil (25331 3400 518200 851000) 0 nil])
([nil nil ((#(" + sum(abs2, b_old)" 0 19 (fontified t)) . 8295) (undo-tree-id1426 . -18) (undo-tree-id1427 . -18) (undo-tree-id1428 . -19) (undo-tree-id1429 . -18) (undo-tree-id1430 . -19) (undo-tree-id1431 . -18) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -5) (undo-tree-id1460 . -5) (undo-tree-id1461 . -5) (undo-tree-id1462 . -5) (undo-tree-id1463 . -5) (undo-tree-id1464 . -5) (undo-tree-id1465 . -5) (undo-tree-id1466 . -5) (undo-tree-id1467 . -5) (undo-tree-id1468 . -5) (undo-tree-id1469 . -5) (undo-tree-id1470 . -5) (undo-tree-id1471 . -5) (undo-tree-id1472 . -5) (undo-tree-id1473 . -5) (undo-tree-id1474 . -5) (undo-tree-id1475 . -5) (undo-tree-id1476 . -5) (undo-tree-id1477 . -5) (undo-tree-id1478 . -5) (undo-tree-id1479 . -5) (undo-tree-id1480 . -5) (undo-tree-id1481 . -5) (undo-tree-id1482 . -5) (undo-tree-id1483 . -5) (undo-tree-id1484 . -5) (undo-tree-id1485 . -5) (undo-tree-id1486 . -5) (undo-tree-id1487 . -5) (undo-tree-id1488 . -5) (undo-tree-id1489 . -5) (undo-tree-id1490 . -5) (undo-tree-id1491 . -5) (undo-tree-id1492 . -5) (undo-tree-id1493 . -5) (undo-tree-id1494 . -5) (undo-tree-id1495 . -5) (undo-tree-id1496 . -5) (undo-tree-id1497 . -5) (undo-tree-id1498 . -5) (undo-tree-id1499 . -5) (undo-tree-id1500 . -5) (undo-tree-id1501 . -5) (undo-tree-id1502 . -5) (undo-tree-id1503 . -5) (undo-tree-id1504 . -5) (undo-tree-id1505 . -5) (undo-tree-id1506 . -5) (undo-tree-id1507 . -5) (undo-tree-id1508 . -5) (undo-tree-id1509 . -5) (undo-tree-id1510 . -5) (undo-tree-id1511 . -5) (undo-tree-id1512 . -5) (undo-tree-id1513 . -6) (undo-tree-id1514 . -6) (undo-tree-id1515 . -6) (undo-tree-id1516 . -6) (undo-tree-id1517 . -6) (undo-tree-id1518 . -6) (undo-tree-id1519 . -6) (undo-tree-id1520 . -6) (undo-tree-id1521 . -6) (undo-tree-id1522 . -6) (undo-tree-id1523 . -6) (undo-tree-id1524 . -6) (undo-tree-id1525 . -6) (undo-tree-id1526 . -6) (undo-tree-id1527 . -6) (undo-tree-id1528 . -6) (undo-tree-id1529 . -6) (undo-tree-id1530 . -6) (undo-tree-id1531 . -6) (undo-tree-id1532 . -6) (undo-tree-id1533 . -6) (undo-tree-id1534 . -6) (undo-tree-id1535 . -6) (undo-tree-id1536 . -6) (undo-tree-id1537 . -6) (undo-tree-id1538 . -6) (undo-tree-id1539 . -6) (undo-tree-id1540 . 1) (undo-tree-id1541 . -19) (undo-tree-id1542 . 13) (undo-tree-id1543 . -7) (undo-tree-id1544 . -6) (undo-tree-id1545 . -6) (undo-tree-id1546 . -6) (undo-tree-id1547 . -6) (undo-tree-id1548 . -6) (undo-tree-id1549 . -6) (undo-tree-id1550 . -6) (undo-tree-id1551 . -6) (undo-tree-id1552 . -6) (undo-tree-id1553 . -6) (undo-tree-id1554 . -6) (undo-tree-id1555 . -6) (undo-tree-id1556 . -6) (undo-tree-id1557 . -6) (undo-tree-id1558 . -6) (undo-tree-id1559 . -6) (undo-tree-id1560 . -6) (undo-tree-id1561 . -6) (undo-tree-id1562 . -6) (undo-tree-id1563 . -6) (undo-tree-id1564 . -6) (undo-tree-id1565 . -6) (undo-tree-id1566 . -6) (undo-tree-id1567 . -6) (undo-tree-id1568 . -6) (undo-tree-id1569 . -6) (undo-tree-id1570 . -6) (undo-tree-id1571 . -6) (undo-tree-id1572 . -6) (undo-tree-id1573 . -6) (undo-tree-id1574 . -6) (undo-tree-id1575 . -6) (undo-tree-id1576 . -6) (undo-tree-id1577 . -6) (undo-tree-id1578 . -6) (undo-tree-id1579 . -6) (undo-tree-id1580 . -6) (undo-tree-id1581 . -6) (undo-tree-id1582 . -6) (undo-tree-id1583 . -6) (undo-tree-id1584 . -6) (undo-tree-id1585 . -6) (undo-tree-id1586 . -6) (undo-tree-id1587 . -6) (undo-tree-id1588 . -6) (undo-tree-id1589 . -6) (undo-tree-id1590 . -6) (undo-tree-id1591 . -6) (undo-tree-id1592 . -6) (undo-tree-id1593 . -6) (undo-tree-id1594 . -6) (undo-tree-id1595 . -6) (undo-tree-id1596 . -6) (undo-tree-id1597 . -6) (undo-tree-id1598 . -6) (undo-tree-id1599 . -6) (undo-tree-id1600 . -6) (undo-tree-id1601 . -6) (undo-tree-id1602 . -6) (undo-tree-id1603 . -6) (undo-tree-id1604 . -6) (undo-tree-id1605 . -6) (undo-tree-id1606 . -6) (undo-tree-id1607 . -6) (undo-tree-id1608 . -6) (undo-tree-id1609 . -6) (undo-tree-id1610 . -6) (undo-tree-id1611 . -6) (undo-tree-id1612 . -6) (undo-tree-id1613 . -6) (undo-tree-id1614 . -6) (undo-tree-id1615 . -6) (undo-tree-id1616 . -6) (undo-tree-id1617 . -6) (undo-tree-id1618 . -6) (undo-tree-id1619 . -6) (undo-tree-id1620 . -6) (undo-tree-id1621 . -6) (undo-tree-id1622 . -6) (undo-tree-id1623 . -6) (undo-tree-id1624 . -6) (undo-tree-id1625 . -6) (undo-tree-id1626 . -18) (undo-tree-id1627 . -18) (undo-tree-id1628 . -18) (undo-tree-id1629 . -18) (undo-tree-id1630 . -18) (undo-tree-id1631 . -18) (undo-tree-id1632 . -18) (undo-tree-id1633 . -18) (undo-tree-id1634 . -18) (undo-tree-id1635 . -18) (undo-tree-id1636 . -18) (undo-tree-id1637 . -18) (undo-tree-id1638 . -18) (undo-tree-id1639 . -18) (undo-tree-id1640 . -18) (undo-tree-id1641 . -18) (undo-tree-id1642 . -18) (undo-tree-id1643 . -18) (undo-tree-id1644 . -18) (undo-tree-id1645 . -18) (undo-tree-id1646 . -18) (undo-tree-id1647 . -18) (undo-tree-id1648 . -18) (undo-tree-id1649 . -18) (undo-tree-id1650 . -18) (undo-tree-id1651 . -18) (undo-tree-id1652 . -18) (undo-tree-id1653 . -18) (undo-tree-id1654 . -18) (undo-tree-id1655 . -18) (undo-tree-id1656 . -18) (undo-tree-id1657 . -18) (undo-tree-id1658 . -18) (undo-tree-id1659 . -18) (undo-tree-id1660 . -18) (undo-tree-id1661 . -18) (undo-tree-id1662 . -18) (undo-tree-id1663 . -18) (undo-tree-id1664 . -18) (undo-tree-id1665 . -18) (undo-tree-id1666 . -18) (undo-tree-id1667 . -18) (undo-tree-id1668 . -18) (undo-tree-id1669 . -18) (undo-tree-id1670 . -18) (undo-tree-id1671 . -18) (undo-tree-id1672 . -18) (undo-tree-id1673 . -18) (undo-tree-id1674 . -18) (undo-tree-id1675 . -18) (undo-tree-id1676 . -18) (undo-tree-id1677 . -18) (undo-tree-id1678 . -18) (undo-tree-id1679 . -18) (undo-tree-id1680 . -18) 8313) nil (25331 3400 518167 188000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t)) . -8296) (undo-tree-id1685 . -12) (undo-tree-id1686 . -12) (undo-tree-id1687 . -12) (undo-tree-id1688 . -12) (undo-tree-id1689 . -12) (undo-tree-id1690 . -12) (undo-tree-id1691 . -12) (undo-tree-id1692 . -12) (undo-tree-id1693 . -12) (undo-tree-id1694 . -12) (undo-tree-id1695 . -12) (undo-tree-id1696 . -12) (undo-tree-id1697 . -12) (undo-tree-id1698 . -12) (undo-tree-id1699 . -12) (undo-tree-id1700 . -12) (undo-tree-id1701 . -12) (undo-tree-id1702 . -12) (undo-tree-id1703 . -12) (undo-tree-id1704 . -12) (undo-tree-id1705 . -12) (undo-tree-id1706 . -12) (undo-tree-id1707 . -12) (undo-tree-id1708 . -12) (undo-tree-id1709 . -12) (undo-tree-id1710 . -12) (undo-tree-id1711 . -12) (undo-tree-id1712 . -12) (undo-tree-id1713 . -12) (undo-tree-id1714 . -12) (undo-tree-id1715 . -12) (undo-tree-id1716 . -12) (undo-tree-id1717 . -12) (undo-tree-id1718 . -12) (undo-tree-id1719 . -12) (undo-tree-id1720 . -12) (undo-tree-id1721 . -12) (undo-tree-id1722 . -12) (undo-tree-id1723 . -12) (undo-tree-id1724 . -12) (undo-tree-id1725 . -12) (undo-tree-id1726 . -12) (undo-tree-id1727 . -12) (undo-tree-id1728 . -12) (undo-tree-id1729 . -12) (undo-tree-id1730 . -12) (undo-tree-id1731 . -12) (undo-tree-id1732 . -12) (undo-tree-id1733 . -12) (undo-tree-id1734 . -12) (undo-tree-id1735 . -12) (undo-tree-id1736 . -12) (undo-tree-id1737 . -12) (undo-tree-id1738 . -12) (undo-tree-id1739 . -12) (undo-tree-id1740 . -12) 8308 (8295 . 8308) (t 25331 3400 529745 965000)) nil (25331 3401 747695 505000) 0 nil])
([nil nil ((8295 . 8308) (#("
" 0 1 (fontified t)) . -8295) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) 8296 (t 25331 3401 759739 216000)) nil (25331 3409 649071 120000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8320 . 8321) (#("
" 0 1 (fontified nil)) . -8332) (8308 . 8333) 8307) nil (25331 3409 649063 88000) 0 nil])
([nil nil ((#("            
" 0 12 (fontified t) 12 13 (fontified t)) . 8296) (undo-tree-id1741 . -11) (undo-tree-id1742 . -11) (undo-tree-id1743 . -11) (undo-tree-id1744 . -13) (undo-tree-id1745 . -11) (undo-tree-id1746 . -11) (undo-tree-id1747 . -11) (undo-tree-id1748 . -11) 8307) nil (25331 3409 649051 75000) 0 nil])
([nil nil ((#("            a_old .-= a
" 0 11 (fontified t) 11 12 (fontified t rear-nonsticky t) 12 23 (fontified t) 23 24 (fontified t)) . 8296) (undo-tree-id1751 . -12) (undo-tree-id1752 . 1) (undo-tree-id1753 . -12) (undo-tree-id1754 . -12) (undo-tree-id1755 . -23) (undo-tree-id1756 . -12) (undo-tree-id1757 . -12) (undo-tree-id1758 . -24) (undo-tree-id1759 . -12) (undo-tree-id1760 . -12) (undo-tree-id1761 . -12) (undo-tree-id1762 . -12) (undo-tree-id1763 . -12) (undo-tree-id1764 . -12) (undo-tree-id1765 . -12) (undo-tree-id1766 . -12) (undo-tree-id1767 . -12) (undo-tree-id1768 . -12) (undo-tree-id1769 . -12) (undo-tree-id1770 . -12) (undo-tree-id1771 . -12) (undo-tree-id1772 . -12) (undo-tree-id1773 . -12) (undo-tree-id1774 . -12) (undo-tree-id1775 . -12) (undo-tree-id1776 . -12) (undo-tree-id1777 . -12) (undo-tree-id1778 . -12) (undo-tree-id1779 . -12) (undo-tree-id1780 . -12) (undo-tree-id1781 . -12) (undo-tree-id1782 . -12) (undo-tree-id1783 . -12) (undo-tree-id1784 . -12) (undo-tree-id1785 . -12) (undo-tree-id1786 . -12) (undo-tree-id1787 . -12) (undo-tree-id1788 . -12) 8308 (t 25331 3409 659695 865000)) nil (25331 3425 821968 103000) 0 nil])
([nil nil ((8318 . 8326) (#("a" 0 1 (fontified t)) . -8318) (undo-tree-id1789 . -1) (#("_" 0 1 (fontified t)) . -8319) (undo-tree-id1790 . -1) 8320 (8308 . 8320) (8295 . 8308) (t 25331 3425 832940 449000)) nil (25331 3456 324115 417000) 0 nil])
([nil nil ((8320 . 8321)) nil (25331 3456 324093 976000) 0 nil])
([nil nil ((8308 . 8324)) nil (25331 3456 324083 919000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 8336) (t 25331 3456 332773 82000)) nil (25331 3476 445043 899000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8354 . 8355) (#("
" 0 1 (fontified nil)) . -8866) (8342 . 8867) 8336 (t 25331 3476 455995 991000)) nil (25331 3495 241228 392000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 8590) (t 25331 3495 252559 512000)) nil (25331 3508 787117 351000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . 8590)) nil (25331 3508 787105 478000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 8660) (t 25331 3508 799151 843000)) nil (25331 3512 504241 547000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . 8660)) nil (25331 3512 504224 436000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 8696) (t 25331 3512 515798 115000)) nil (25331 3519 553815 870000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . 8696)) nil (25331 3519 553804 765000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 8706) (t 25331 3519 565759 428000)) nil (25331 3522 925983 829000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . 8706)) nil (25331 3522 925980 546000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 8706)) nil (25331 3522 925975 727000) 0 nil])
([nil nil ((8706 . 8707)) nil (25331 3522 925965 111000) 0 nil])
([nil nil ((9007 . 9026) (9002 . 9007) (t 25331 3522 935740 936000)) nil (25331 3537 491037 895000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -7592) (7584 . 7592) 7612 (t 25331 3537 502327 669000)) nil (25331 3563 500635 637000) 0 nil])
([nil nil ((7559 . 7562) (7557 . 7559) (7554 . 7557) (7553 . 7554) (t 25331 3563 505518 311000)) nil (25331 3569 337082 193000) 0 nil])
([nil nil ((7558 . 7562) (t 25331 3569 342152 950000)) nil (25331 3575 575140 726000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7562 . 7563) (#("
" 0 1 (fontified nil)) . -7706) (7562 . 7707) 7561) nil (25331 3575 575136 326000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t face font-lock-string-face) 4 5 (fontified t rear-nonsticky t face font-lock-string-face)) . 7558) (undo-tree-id1791 . -5)) nil (25331 3575 575131 88000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil face font-lock-string-face)) . -7712) (7704 . 7712) (#("        " 0 8 (fontified nil face font-lock-string-face)) . -7604) (7592 . 7604) (7558 . 7562) 7696) nil (25331 3575 575103 430000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil face font-lock-string-face)) . -7708) (undo-tree-id1792 . -8) (undo-tree-id1793 . -8) (undo-tree-id1794 . -8) (undo-tree-id1795 . -8) (undo-tree-id1796 . -8) (undo-tree-id1797 . -8) (undo-tree-id1798 . -8) (undo-tree-id1799 . -8) (undo-tree-id1800 . -8) (undo-tree-id1801 . -8) (undo-tree-id1802 . -8) (undo-tree-id1803 . -8) (undo-tree-id1804 . -8) (undo-tree-id1805 . -8) (undo-tree-id1806 . -8) (undo-tree-id1807 . -8) (undo-tree-id1808 . -8) (undo-tree-id1809 . -8) (undo-tree-id1810 . -8) (undo-tree-id1811 . -8) (undo-tree-id1812 . -8) (undo-tree-id1813 . -8) (undo-tree-id1814 . -8) (undo-tree-id1815 . -8) (undo-tree-id1816 . -8) (undo-tree-id1817 . -8) (undo-tree-id1818 . -8) (undo-tree-id1819 . -8) (undo-tree-id1820 . -8) (undo-tree-id1821 . -8) (undo-tree-id1822 . -8) (undo-tree-id1823 . -8) (undo-tree-id1824 . -8) (undo-tree-id1825 . -8) (undo-tree-id1826 . -8) (undo-tree-id1827 . -8) (undo-tree-id1828 . -8) (undo-tree-id1829 . -8) (undo-tree-id1830 . -8) (undo-tree-id1831 . -8) (undo-tree-id1832 . -8) (undo-tree-id1833 . -8) (undo-tree-id1834 . -8) (undo-tree-id1835 . -8) (undo-tree-id1836 . -8) (undo-tree-id1837 . -8) (undo-tree-id1838 . -8) (undo-tree-id1839 . -8) (undo-tree-id1840 . -8) (undo-tree-id1841 . -8) (undo-tree-id1842 . -8) (undo-tree-id1843 . -8) (undo-tree-id1844 . -8) (undo-tree-id1845 . -8) (undo-tree-id1846 . -8) (undo-tree-id1847 . -8) (undo-tree-id1848 . -8) (undo-tree-id1849 . -8) (undo-tree-id1850 . -8) (undo-tree-id1851 . -8) (undo-tree-id1852 . -8) (undo-tree-id1853 . -8) (undo-tree-id1854 . -8) (undo-tree-id1855 . -8) (undo-tree-id1856 . -8) (undo-tree-id1857 . -8) (undo-tree-id1858 . -8) (undo-tree-id1859 . -8) (undo-tree-id1860 . -8) (undo-tree-id1861 . -8) (undo-tree-id1862 . -8) (undo-tree-id1863 . -8) (undo-tree-id1864 . -8) (undo-tree-id1865 . -8) (undo-tree-id1866 . -8) (undo-tree-id1867 . -8) (undo-tree-id1868 . -8) (undo-tree-id1869 . -8) (undo-tree-id1870 . -8) (undo-tree-id1871 . -8) (undo-tree-id1872 . -8) (undo-tree-id1873 . -8) (undo-tree-id1874 . -8) (undo-tree-id1875 . -8) (undo-tree-id1876 . -8) (undo-tree-id1877 . -8) (undo-tree-id1878 . -8) (undo-tree-id1879 . -8) (undo-tree-id1880 . -8) (undo-tree-id1881 . -8) (undo-tree-id1882 . -8) (undo-tree-id1883 . -8) (undo-tree-id1884 . -8) (undo-tree-id1885 . -8) (undo-tree-id1886 . -8) (undo-tree-id1887 . -8) (undo-tree-id1888 . -8) (undo-tree-id1889 . -8) (undo-tree-id1890 . -8) (undo-tree-id1891 . -8) (undo-tree-id1892 . -8) (undo-tree-id1893 . -8) (undo-tree-id1894 . -8) (undo-tree-id1895 . -8) (undo-tree-id1896 . -8) (undo-tree-id1897 . -8) (undo-tree-id1898 . -8) (undo-tree-id1899 . -8) (undo-tree-id1900 . -8) (undo-tree-id1901 . -8) (undo-tree-id1902 . -8) (undo-tree-id1903 . -8) (undo-tree-id1904 . -8) (undo-tree-id1905 . -8) (undo-tree-id1906 . -8) (undo-tree-id1907 . -8) (7704 . 7708) 7712 (t 25331 3575 585452 23000)) nil (25331 3578 925509 543000) 0 nil])
([nil nil ((7710 . 7714) (7709 . 7710) (t 25331 3578 942100 271000)) nil (25331 3618 592422 638000) 0 nil])
([nil nil ((#("See " 0 4 (fontified t face font-lock-string-face)) . -7715) (undo-tree-id2035 . -4) 7719 (#("`" 0 1 (fontified t face font-lock-string-face)) . -7719) (undo-tree-id2036 . -1) 7720 (7715 . 7720) (7711 . 7715) (#("Specialization" 0 14 (fontified t face font-lock-string-face)) . -7711) (undo-tree-id2037 . -14) 7725 (7711 . 7725) (#("Speciali" 0 8 (fontified t face font-lock-string-face)) . -7711) (undo-tree-id2038 . -8) 7719 (7711 . 7719) (#("    " 0 4 (fontified nil face font-lock-string-face)) . 7710) (undo-tree-id2039 . -4) (7714 . 7715)) nil (25331 3618 592417 399000) 0 nil])
([nil nil ((7800 . 7802) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7800) (undo-tree-id2028 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -7801) (undo-tree-id2029 . -1) 7802 (7801 . 7802) (7780 . 7801) (7774 . 7780) (#("symm" 0 4 (fontified t face font-lock-string-face)) . -7774) (undo-tree-id2030 . -4) 7778 (7777 . 7778) (7756 . 7777) (#("1" 0 1 (fontified t face font-lock-string-face)) . -7756) (undo-tree-id2031 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7757) (undo-tree-id2032 . -1) 7758 (7749 . 7758) (#("n" 0 1 (fontified t face font-lock-string-face)) . -7749) (undo-tree-id2033 . -1) 7750 (7744 . 7750) (7723 . 7744) (#("z" 0 1 (fontified t face font-lock-string-face)) . -7723) (undo-tree-id2034 . -1) 7724 (7715 . 7724)) nil (25331 3618 592401 755000) 0 nil])
([nil nil ((#("where " 0 6 (fontified t face font-lock-string-face)) . -7787) (undo-tree-id1908 . -6) (undo-tree-id1909 . -3) (undo-tree-id1910 . -3) (undo-tree-id1911 . -3) (undo-tree-id1912 . -3) (undo-tree-id1913 . -3) (undo-tree-id1914 . -3) (undo-tree-id1915 . -3) (undo-tree-id1916 . -3) (undo-tree-id1917 . -3) (undo-tree-id1918 . -3) (undo-tree-id1919 . -3) (undo-tree-id1920 . -3) (undo-tree-id1921 . -3) (undo-tree-id1922 . -3) (undo-tree-id1923 . -3) (undo-tree-id1924 . -3) (undo-tree-id1925 . -3) (undo-tree-id1926 . -3) (undo-tree-id1927 . -3) (undo-tree-id1928 . -3) (undo-tree-id1929 . -3) (undo-tree-id1930 . -3) (undo-tree-id1931 . -3) (undo-tree-id1932 . -3) (undo-tree-id1933 . -3) (undo-tree-id1934 . -3) (undo-tree-id1935 . -3) (undo-tree-id1936 . -4) (undo-tree-id1937 . -4) (undo-tree-id1938 . -4) (undo-tree-id1939 . -4) (undo-tree-id1940 . -4) (undo-tree-id1941 . -4) (undo-tree-id1942 . -4) (undo-tree-id1943 . -4) (undo-tree-id1944 . -4) (undo-tree-id1945 . -4) (undo-tree-id1946 . -4) (undo-tree-id1947 . -4) (undo-tree-id1948 . -4) (undo-tree-id1949 . -4) (undo-tree-id1950 . -4) (undo-tree-id1951 . -4) (undo-tree-id1952 . -4) (undo-tree-id1953 . -4) (undo-tree-id1954 . -4) (undo-tree-id1955 . -4) (undo-tree-id1956 . -4) (undo-tree-id1957 . -4) (undo-tree-id1958 . -4) (undo-tree-id1959 . -4) (undo-tree-id1960 . -4) (undo-tree-id1961 . -4) (undo-tree-id1962 . -4) (undo-tree-id1963 . -5) (undo-tree-id1964 . -5) (undo-tree-id1965 . -5) (undo-tree-id1966 . -5) (undo-tree-id1967 . -5) (undo-tree-id1968 . -5) (undo-tree-id1969 . -5) (undo-tree-id1970 . -5) (undo-tree-id1971 . -5) (undo-tree-id1972 . -5) (undo-tree-id1973 . -5) (undo-tree-id1974 . -5) (undo-tree-id1975 . -5) (undo-tree-id1976 . -5) (undo-tree-id1977 . -5) (undo-tree-id1978 . -5) (undo-tree-id1979 . -5) (undo-tree-id1980 . -5) (undo-tree-id1981 . -5) (undo-tree-id1982 . -5) (undo-tree-id1983 . -5) (undo-tree-id1984 . -5) (undo-tree-id1985 . -5) (undo-tree-id1986 . -5) (undo-tree-id1987 . -5) (undo-tree-id1988 . -5) (undo-tree-id1989 . -5) (undo-tree-id1990 . -6) (undo-tree-id1991 . -6) (undo-tree-id1992 . -6) (undo-tree-id1993 . -6) (undo-tree-id1994 . -6) (undo-tree-id1995 . -6) (undo-tree-id1996 . -6) (undo-tree-id1997 . -6) (undo-tree-id1998 . -6) (undo-tree-id1999 . -6) (undo-tree-id2000 . -6) (undo-tree-id2001 . -6) (undo-tree-id2002 . -6) (undo-tree-id2003 . -6) (undo-tree-id2004 . -6) (undo-tree-id2005 . -6) (undo-tree-id2006 . -6) (undo-tree-id2007 . -6) (undo-tree-id2008 . -6) (undo-tree-id2009 . -6) (undo-tree-id2010 . -6) (undo-tree-id2011 . -6) (undo-tree-id2012 . -6) (undo-tree-id2013 . -6) (undo-tree-id2014 . -6) (undo-tree-id2015 . -6) (undo-tree-id2016 . -6) (undo-tree-id2017 . -6) 7793 (7786 . 7793) (7785 . 7786) (7764 . 7785) (#("symmetr" 0 7 (fontified t face font-lock-string-face)) . -7764) (undo-tree-id2018 . -7) 7771 (7764 . 7771) (#("case " 0 5 (fontified t face font-lock-string-face)) . -7764) (undo-tree-id2019 . -5) 7769 (#("of " 0 3 (fontified t face font-lock-string-face)) . -7769) (undo-tree-id2020 . -3) 7772 (#("a " 0 2 (fontified t face font-lock-string-face)) . -7772) (undo-tree-id2021 . -2) 7774 (#("single" 0 6 (fontified t face font-lock-string-face)) . -7774) (undo-tree-id2022 . -6) 7780 (#(", " 0 2 (fontified t face font-lock-string-face)) . -7780) (undo-tree-id2023 . -2) 7782 (#("symmetric " 0 10 (fontified t face font-lock-string-face)) . -7782) (undo-tree-id2024 . -10) 7792 (#("marginal" 0 8 (fontified t face font-lock-string-face)) . -7792) (undo-tree-id2025 . -8) 7800 (#(". " 0 2 (fontified t face font-lock-string-face)) . -7800) (undo-tree-id2026 . 1) (undo-tree-id2027 . -2) 7802) nil (25331 3618 592366 974000) 0 nil])
([nil nil ((7808 . 7809) (#("\\nu" 0 3 (fontified t face font-lock-string-face)) . 7808) (undo-tree-id2042 . -3) 7811 (7806 . 7811) (7805 . 7806) (#("\\mu" 0 3 (fontified t face font-lock-string-face)) . 7805) (undo-tree-id2043 . -3) 7808 (7805 . 7808) (#("\\" 0 1 (fontified t face font-lock-string-face)) . -7805) (undo-tree-id2044 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -7806) (undo-tree-id2045 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -7807) (undo-tree-id2046 . -1) 7808 (7805 . 7808) (#("$" 0 1 (fontified t face font-lock-string-face)) . -7805) (undo-tree-id2047 . -1) 7806 (7803 . 7806) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7803) (undo-tree-id2048 . -1) 7804 (#("distributions " 0 14 (fontified t face font-lock-string-face)) . -7804) (undo-tree-id2049 . -14) 7818 (#("are " 0 4 (fontified t face font-lock-string-face)) . -7818) (undo-tree-id2050 . -4) 7822 (#("identical " 0 10 (fontified t face font-lock-string-face)) . -7822) (undo-tree-id2051 . -10) 7832 (#("and " 0 4 (fontified t face font-lock-string-face)) . -7832) (undo-tree-id2052 . -4) 7836 (#("t" 0 1 (fontified t face font-lock-string-face)) . -7836) (undo-tree-id2053 . -1) 7837 (7831 . 7837) (#("," 0 1 (fontified t face font-lock-string-face)) . -7831) (undo-tree-id2054 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7832) (undo-tree-id2055 . -1) 7833 (7832 . 7833) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7832) (undo-tree-id2056 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -7833) (undo-tree-id2057 . -1) (#("." 0 1 (fontified t face font-lock-string-face)) . -7834) (undo-tree-id2058 . -1) 7835 (#("e" 0 1 (fontified t face font-lock-string-face)) . -7835) (undo-tree-id2059 . -1) 7836 (#("." 0 1 (fontified t face font-lock-string-face)) . -7836) (undo-tree-id2060 . -1) (#("
" 0 1 (fontified t face font-lock-string-face)) . -7837) (undo-tree-id2061 . -1) 7838 (#("   " 0 3 (fontified t face font-lock-string-face)) . -7838) (undo-tree-id2062 . -3) 7841 (#(" " 0 1 (fontified t face font-lock-string-face)) . -7841) (undo-tree-id2063 . -1) 7842 (#("`" 0 1 (fontified t face font-lock-string-face)) . -7842) (undo-tree-id2064 . -1) (#("\\" 0 1 (fontified t face font-lock-string-face)) . -7843) (undo-tree-id2065 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -7844) (undo-tree-id2066 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -7845) (undo-tree-id2067 . -1) 7846 (7842 . 7846) (#("`" 0 1 (fontified t face font-lock-string-face)) . -7842) (undo-tree-id2068 . -1) (#("μ" 0 1 (fontified t face font-lock-string-face)) . -7843) (undo-tree-id2069 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7844) (undo-tree-id2070 . -1) (#("=" 0 1 (fontified t face font-lock-string-face)) . -7845) (undo-tree-id2071 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7846) (undo-tree-id2072 . -1) 7847 (7844 . 7847) (7843 . 7844) (#("\\mu" 0 3 (fontified t face font-lock-string-face)) . 7843) (undo-tree-id2073 . -3) 7846 (7842 . 7846) (7838 . 7842) (#("`" 0 1 (fontified t face font-lock-string-face)) . -7838) (undo-tree-id2074 . -1) 7839 (7838 . 7839) (7837 . 7838) (7831 . 7837) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7831) (undo-tree-id2075 . -1) 7832 (#("(" 0 1 (fontified t face font-lock-string-face)) . -7832) (undo-tree-id2076 . -1) 7833 (#("and " 0 4 (fontified t face font-lock-string-face)) . -7833) (undo-tree-id2077 . -4) 7837 (#("the " 0 4 (fontified t face font-lock-string-face)) . -7837) (undo-tree-id2078 . -4) 7841 (#("cost " 0 5 (fontified t face font-lock-string-face)) . -7841) (undo-tree-id2079 . -5) 7846 (#("`" 0 1 (fontified t face font-lock-string-face)) . -7846) (undo-tree-id2080 . -1) 7847 (#("C" 0 1 (fontified t face font-lock-string-face)) . -7847) (undo-tree-id2081 . -1) 7848 (#("` " 0 2 (fontified t face font-lock-string-face)) . -7848) (undo-tree-id2082 . -2) 7850 (#("a" 0 1 (fontified t face font-lock-string-face)) . -7850) (undo-tree-id2083 . -1) 7851 (7846 . 7851) (7831 . 7846) (#("." 0 1 (fontified t face font-lock-string-face)) . -7831) (undo-tree-id2084 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7832) (undo-tree-id2085 . -1) 7833 (7825 . 7833) (7804 . 7825) (#("marginals " 0 10 (fontified t face font-lock-string-face)) . -7804) (undo-tree-id2086 . -10) 7814 (7808 . 7814) (7787 . 7808) (t 25331 3618 601882 640000)) nil (25331 3657 505884 869000) 0 nil])
([nil nil ((7805 . 7806)) nil (25331 3657 505790 863000) 0 nil])
([nil nil ((7837 . 7857) (7816 . 7837) (#("s" 0 1 (fontified t face font-lock-string-face)) . -7816) (undo-tree-id2040 . -1) 7817 (7816 . 7817) (#("c" 0 1 (fontified t face font-lock-string-face)) . -7816) (undo-tree-id2041 . -1) 7817 (7810 . 7817)) nil (25331 3657 505780 317000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t face font-lock-string-face)) . -7856) (undo-tree-id2116 . -1) 7857 (#(" " 0 1 (fontified nil face font-lock-string-face)) . 7856) (undo-tree-id2117 . -1) (7857 . 7858) (t 25331 3657 511669 124000)) nil (25331 3682 569854 22000) 0 nil])
([nil nil ((7735 . 7736)) nil (25331 3682 569846 270000) 0 nil])
([nil nil ((7759 . 7764) (#("2" 0 1 (fontified t face font-lock-string-face)) . -7759) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) 7760 (7757 . 7760)) nil (25331 3682 569834 955000) 0 nil])
([nil nil ((8149 . 8150) (#("," 0 1 (fontified t)) . -8149) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (#(" " 0 1 (fontified t)) . -8150) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (#("ν" 0 1 (fontified t)) . -8151) (undo-tree-id2203 . -1) (#("," 0 1 (fontified t)) . -8152) (undo-tree-id2204 . -1) 8153 (t 25331 3682 581531 555000)) nil (25331 4130 575355 960000) 0 nil])
([nil nil ((2035 . 2036) (2031 . 2035) (#("    " 0 4 (fontified nil)) . 2030) (undo-tree-id2299 . -4) (2029 . 2035) (2021 . 2029) (2000 . 2021) (1998 . 2000) (t 25331 3715 228019 76000)) nil (25331 4231 395339 729000) 0 nil] [nil nil ((#("    # define \"proxdiv\" functions for the unbalanced OT problem
    proxdivF!(s, p, ε, λ) = (s .= (p ./ s) .^ (λ / (ε + λ)))
    proxdivF1!(s, p, ε) = proxdivF!(s, p, ε, λ1)
    proxdivF2!(s, p, ε) = proxdivF!(s, p, ε, λ2)
" 0 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 63 (fontified t face font-lock-comment-face) 63 67 (fontified t) 67 76 (fontified t face font-lock-function-name-face) 76 128 (fontified t) 128 138 (fontified t face font-lock-function-name-face) 138 177 (fontified t) 177 187 (fontified t face font-lock-function-name-face) 187 222 (fontified t)) . 1694) (undo-tree-id2286 . -179) (undo-tree-id2287 . -6) (undo-tree-id2288 . -179) (undo-tree-id2289 . -6) (undo-tree-id2290 . -6) (undo-tree-id2291 . -179) 1700 (t 25331 3715 228019 76000)) ((1694 . 1916)) (25331 4129 967146 686000) 0 nil] [nil nil ((#("    # define \"proxdiv\" functions for the unbalanced OT problem
    proxdivF!(s, p, ε, λ) = (s .= (p ./ s) .^ (λ / (ε + λ)))
    proxdivF1!(s, p, ε) = proxdivF!(s, p, ε, λ1)
    proxdivF2!(s, p, ε) = proxdivF!(s, p, ε, λ2)
" 0 4 (fontified t) 4 6 (fontified t face font-lock-comment-delimiter-face) 6 63 (fontified t face font-lock-comment-face) 63 67 (fontified t) 67 76 (fontified t face font-lock-function-name-face) 76 128 (fontified t) 128 138 (fontified t face font-lock-function-name-face) 138 177 (fontified t) 177 187 (fontified t face font-lock-function-name-face) 187 222 (fontified t)) . 1694) (undo-tree-id2265 . -179) (undo-tree-id2266 . -6) (undo-tree-id2267 . -179) (undo-tree-id2268 . -179) (undo-tree-id2269 . -6) (undo-tree-id2270 . -179) 1873 (t 25331 3715 228019 76000)) ((1694 . 1916)) (25331 4118 633868 210000) 0 nil])
([nil nil ((2051 . 2061) (#(" " 0 1 (fontified t)) . -2051) (undo-tree-id2294 . -1) (#("p" 0 1 (fontified t)) . -2052) (undo-tree-id2295 . -1) 2053 (2050 . 2053) (2049 . 2050) (#("\\varepsilon" 0 1 (fontified t syntax-table (1)) 1 11 (fontified t)) . 2049) (undo-tree-id2296 . -11) 2060 (2049 . 2060) (2041 . 2049) (2040 . 2041) (#("\\lambda" 0 1 (fontified t syntax-table (1)) 1 7 (fontified t)) . 2040) (undo-tree-id2297 . -7) 2047 (2035 . 2047) (2034 . 2035) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 2034) (undo-tree-id2298 . -3) 2037 (2034 . 2037) (2030 . 2034)) nil (25331 4231 395324 503000) 0 nil])
([nil nil ((1 . 3)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 1) (undo-tree-id2293 . 2)) (25331 4129 864323 970000) 0 nil])
([nil nil ((1 . 3)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 1)) (25331 4118 163550 776000) 0 nil] [nil nil ((nil rear-nonsticky nil 5 . 6) (2 . 224) 1 (1 . 2) (#("\"\"\"
    " 0 1 (fontified t syntax-table (15) face font-lock-string-face) 1 8 (fontified t face font-lock-string-face)) . 1) (undo-tree-id2205 . -8) (undo-tree-id2206 . -7) (undo-tree-id2207 . -2) (undo-tree-id2208 . -7) (undo-tree-id2209 . -7) (undo-tree-id2210 . -7) (undo-tree-id2211 . -7) (undo-tree-id2212 . -7) (undo-tree-id2213 . -7) (undo-tree-id2214 . -7) (undo-tree-id2215 . -7) (undo-tree-id2216 . -7) (undo-tree-id2217 . -7) (undo-tree-id2218 . -7) (undo-tree-id2219 . -7) (undo-tree-id2220 . -7) (undo-tree-id2221 . -7) (undo-tree-id2222 . -7) (undo-tree-id2223 . -7) (undo-tree-id2224 . -7) (undo-tree-id2225 . -7) (undo-tree-id2226 . -7) (undo-tree-id2227 . -7) (undo-tree-id2228 . -7) (undo-tree-id2229 . -7) (undo-tree-id2230 . -7) (undo-tree-id2231 . -7) (undo-tree-id2232 . -7) (undo-tree-id2233 . -7) (undo-tree-id2234 . -7) (undo-tree-id2235 . -7) (undo-tree-id2236 . -8) (undo-tree-id2237 . -7) (undo-tree-id2238 . -7) (undo-tree-id2239 . -7) (undo-tree-id2240 . -7) (undo-tree-id2241 . -7) (undo-tree-id2242 . -7) (undo-tree-id2243 . -7) (undo-tree-id2244 . -7) (undo-tree-id2245 . -7) (undo-tree-id2246 . -7) (undo-tree-id2247 . -7) (undo-tree-id2248 . -7) (undo-tree-id2249 . -7) (undo-tree-id2250 . -7) (undo-tree-id2251 . -7) (undo-tree-id2252 . -7) (undo-tree-id2253 . -7) (undo-tree-id2254 . -7) (undo-tree-id2255 . -7) (undo-tree-id2256 . -7) (undo-tree-id2257 . -7) (undo-tree-id2258 . -7) (undo-tree-id2259 . -7) (undo-tree-id2260 . -7) (undo-tree-id2261 . -7) (undo-tree-id2262 . -7) (undo-tree-id2263 . -7) (undo-tree-id2264 . -7)) ((1 . 9) (#("
" 0 1 (fontified t)) . 1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (#("    # define \"proxdiv\" functions for the unbalanced OT problem
    proxdivF!(s, p, ε, λ) = (s .= (p ./ s) .^ (λ / (ε + λ)))
    proxdivF1!(s, p, ε) = proxdivF!(s, p, ε, λ1)
    proxdivF2!(s, p, ε) = proxdivF!(s, p, ε, λ2)
" 0 3 (fontified nil) 3 4 (fontified nil rear-nonsticky nil) 4 6 (fontified nil face font-lock-comment-delimiter-face) 6 63 (fontified nil face font-lock-comment-face) 63 67 (fontified t) 67 76 (fontified t face font-lock-function-name-face) 76 128 (fontified t) 128 138 (fontified t face font-lock-function-name-face) 138 177 (fontified t) 177 187 (fontified t face font-lock-function-name-face) 187 222 (fontified t)) . 2) (undo-tree-id2278 . -222) (undo-tree-id2279 . -221) (undo-tree-id2280 . -4) (undo-tree-id2281 . -4) (nil rear-nonsticky t 5 . 6)) (25331 4114 746425 283000) 0 nil])
([nil nil ((2077 . 2080) (2073 . 2077) (#("    " 0 4 (fontified nil)) . 2072) (undo-tree-id2307 . -4) (2072 . 2077) (2062 . 2070) (#("    " 0 4 (fontified nil)) . 2062) (2067 . 2068) (t 25331 4231 408519 897000)) nil (25331 4259 883902 363000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5 . 6) (#("
" 0 1 (fontified nil)) . -223) (1 . 224)) ((#("
    # define \"proxdiv\" functions for the unbalanced OT problem
    proxdivF!(s, p, ε, λ) = (s .= (p ./ s) .^ (λ / (ε + λ)))
    proxdivF1!(s, p, ε) = proxdivF!(s, p, ε, λ1)
    proxdivF2!(s, p, ε) = proxdivF!(s, p, ε, λ2)
" 0 1 (fontified t) 1 4 (fontified nil) 4 5 (fontified nil rear-nonsticky nil) 5 7 (fontified nil face font-lock-comment-delimiter-face) 7 64 (fontified nil face font-lock-comment-face) 64 68 (fontified t) 68 77 (fontified t face font-lock-function-name-face) 77 129 (fontified t) 129 139 (fontified t face font-lock-function-name-face) 139 174 (fontified t) 174 178 (fontified nil) 178 188 (fontified nil face font-lock-function-name-face) 188 222 (fontified nil) 222 223 (fontified nil)) . 1) (undo-tree-id2292 . 222) (223 . 224) (nil rear-nonsticky t 5 . 6)) (25331 4129 864088 466000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8 . 9) (nil fontified nil 1 . 9) (1 . 9)) ((#("\"\"\"
    " 0 1 (fontified nil syntax-table (15) face font-lock-string-face) 1 4 (fontified nil face font-lock-string-face) 4 7 (fontified nil face font-lock-string-face) 7 8 (fontified nil rear-nonsticky nil face font-lock-string-face)) . 1) (undo-tree-id2282 . -7) (undo-tree-id2283 . -7) (undo-tree-id2284 . -4) (undo-tree-id2285 . -7) (nil fontified t 2 . 5) (nil fontified t 1 . 2) (nil rear-nonsticky t 8 . 9)) (25331 4118 163352 916000) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified t)) . -2073) 2079) nil (25331 4259 883895 100000) 0 nil])
nil
nil
([nil nil ((2072 . 2076)) nil (25331 4259 883892 306000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2080 . 2081) (#("
" 0 1 (fontified nil)) . -2137) (2076 . 2138) 2075) nil (25331 4259 883888 535000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 2072) (undo-tree-id2300 . -3) (undo-tree-id2301 . -3) (undo-tree-id2302 . -3) (undo-tree-id2303 . -3) (undo-tree-id2304 . -3) (undo-tree-id2305 . -3) (undo-tree-id2306 . -3) 2075) nil (25331 4259 883877 151000) 0 nil])
([nil nil ((#("    proxdivF!(s, p, ε, λ) = (s .= (p ./ s) .^ (λ / (ε + λ)))
" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 13 (fontified t face font-lock-function-name-face) 13 60 (fontified t) 60 61 (fontified t)) . 2072) (undo-tree-id2372 . -11) (undo-tree-id2373 . 1) (undo-tree-id2374 . -11) (undo-tree-id2375 . -11) (undo-tree-id2376 . -11) (undo-tree-id2377 . -11) (undo-tree-id2378 . -11) 2083 (t 25331 4259 895030 245000)) nil (25331 4318 133658 709000) 0 nil])
([nil nil ((1 . 3)) nil (25331 4318 133648 233000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5 . 6) (#("
" 0 1 (fontified nil)) . -62) (1 . 63)) nil (25331 4318 133645 858000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id2371 . -1)) nil (25331 4318 133641 947000) 0 nil])
([nil nil ((#("    " 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t)) . -1) (undo-tree-id2344 . -4) (undo-tree-id2345 . -4) (undo-tree-id2346 . -4) (undo-tree-id2347 . -4) (undo-tree-id2348 . -4) (undo-tree-id2349 . -4) (undo-tree-id2350 . -4) (undo-tree-id2351 . -4) (undo-tree-id2352 . -4) (undo-tree-id2353 . -4) (undo-tree-id2354 . -4) (undo-tree-id2355 . -4) (undo-tree-id2356 . -4) (undo-tree-id2357 . -4) (undo-tree-id2358 . -4) (undo-tree-id2359 . -4) (undo-tree-id2360 . -4) (undo-tree-id2361 . -4) (undo-tree-id2362 . -4) (undo-tree-id2363 . -4) (undo-tree-id2364 . -4) (undo-tree-id2365 . -4) (undo-tree-id2366 . -4) (undo-tree-id2367 . -4) (undo-tree-id2368 . -4) (undo-tree-id2369 . -4) (undo-tree-id2370 . -4)) nil (25331 4318 133635 731000) 0 nil])
([nil nil ((1 . 2)) nil (25331 4318 133600 950000) 0 nil])
([nil nil ((38 . 40) (36 . 38) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -36) (undo-tree-id2308 . -1) 37 (36 . 37) (#("." 0 1 (fontified t face font-lock-comment-face)) . -36) (undo-tree-id2309 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -37) (undo-tree-id2310 . -1) (#("|" 0 1 (fontified t face font-lock-comment-face)) . -38) (undo-tree-id2311 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -39) (undo-tree-id2312 . -1) 40 (36 . 40) (#("*" 0 1 (fontified t face font-lock-comment-face)) . -36) (undo-tree-id2313 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -37) (undo-tree-id2314 . -1) (#("|" 0 1 (fontified t face font-lock-comment-face)) . -38) (undo-tree-id2315 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -39) (undo-tree-id2316 . -1) 40 (38 . 40) (36 . 38) (#("." 0 1 (fontified t face font-lock-comment-face)) . -36) (undo-tree-id2317 . -1) 37 (33 . 37) (#("k" 0 1 (fontified t face font-lock-comment-face)) . -33) (undo-tree-id2318 . -1) (#("L" 0 1 (fontified t face font-lock-comment-face)) . -34) (undo-tree-id2319 . -1) (#("(" 0 1 (fontified t face font-lock-comment-face)) . -35) (undo-tree-id2320 . -1) 36 (30 . 36) (#("(" 0 1 (fontified t face font-lock-comment-face)) . -30) (undo-tree-id2321 . -1) 31 (30 . 31) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -30) (undo-tree-id2322 . -1) 31 (29 . 31) (#("K" 0 1 (fontified t face font-lock-comment-face)) . -29) (undo-tree-id2323 . -1) 30 (10 . 30) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -10) (undo-tree-id2324 . -1) 11 (#("operator " 0 9 (fontified t face font-lock-comment-face)) . -11) (undo-tree-id2325 . -9) 20 (#("associated " 0 11 (fontified t face font-lock-comment-face)) . -20) (undo-tree-id2326 . -11) 31 (#("i" 0 1 (fontified t face font-lock-comment-face)) . -31) (undo-tree-id2327 . -1) (#("w" 0 1 (fontified t face font-lock-comment-face)) . -32) (undo-tree-id2328 . -1) 33 (31 . 33) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -31) (undo-tree-id2329 . -1) 32 (31 . 32) (#("with " 0 5 (fontified t face font-lock-comment-face)) . -31) (undo-tree-id2330 . -5) 36 (#("the " 0 4 (fontified t face font-lock-comment-face)) . -36) (undo-tree-id2331 . -4) 40 (#("constraint " 0 11 (fontified t face font-lock-comment-face)) . -40) (undo-tree-id2332 . -11) 51 (40 . 51) (#("constrai" 0 8 (fontified t face font-lock-comment-face)) . -40) (undo-tree-id2333 . -8) 48 (40 . 48) (#("constyrain" 0 10 (fontified t face font-lock-comment-face)) . -40) (undo-tree-id2334 . -10) 50 (36 . 50) (#("with" 0 4 (fontified t face font-lock-comment-face)) . -36) (undo-tree-id2335 . -4) 40 (36 . 40) (#("the " 0 4 (fontified t face font-lock-comment-face)) . -36) (undo-tree-id2336 . -4) 40 (35 . 40) (24 . 35) (3 . 24) (#("Pr" 0 2 (fontified t face font-lock-comment-face)) . -3) (undo-tree-id2337 . -2) 5 (#("o" 0 1 (fontified t face font-lock-comment-face)) . -5) (undo-tree-id2338 . -1) 6 (1 . 6) (#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1) (undo-tree-id2339 . -1) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -2) (undo-tree-id2340 . -1) (#("P" 0 1 (fontified t face font-lock-comment-face)) . -3) (undo-tree-id2341 . -1) 4 (1 . 4) (#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1) (undo-tree-id2342 . -1) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -2) (undo-tree-id2343 . -1) 3 (1 . 3)) nil (25331 4318 133574 480000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-face)) . -40) (undo-tree-id2379 . -1) 41 (40 . 41) (t 25331 4318 144710 603000)) nil (25331 4319 663511 119000) 0 nil])
([nil nil ((#("# proxdiv_F associated with F = KL(*|p)
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 39 (fontified t face font-lock-comment-face) 39 40 (fontified t face font-lock-comment-face)) . 1) (undo-tree-id2380 . -38) (undo-tree-id2381 . 1) (undo-tree-id2382 . -38) (undo-tree-id2383 . -38) (undo-tree-id2384 . -38) (undo-tree-id2385 . -38) (undo-tree-id2386 . 2) (undo-tree-id2387 . -39) (undo-tree-id2388 . 6) (undo-tree-id2389 . -35) (undo-tree-id2390 . -38) (undo-tree-id2391 . -38) 39 (t 25331 4319 674702 208000)) nil (25331 4332 812435 131000) 0 nil])
([nil nil ((1 . 2)) nil (25331 4332 812396 369000) 0 nil])
([nil nil ((6 . 8) (4 . 6) (1 . 4)) nil (25331 4332 812393 506000) 0 nil])
([nil nil ((8 . 9)) nil (25331 4332 812390 153000) 0 nil])
([nil nil ((nil rear-nonsticky nil 25 . 26) (nil fontified nil 5 . 26) (5 . 26)) nil (25331 4332 812386 382000) 0 nil])
([nil nil ((5 . 9) 25) nil (25331 4332 812374 998000) 0 nil])
([nil nil ((34 . 35) (t 25331 4332 824630 48000)) nil (25331 4334 771571 264000) 0 nil])
([nil nil ((53 . 55) (#("$" 0 1 (fontified t face font-lock-string-face)) . -53) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) 54 (48 . 54) (32 . 48) (#("```" 0 3 (fontified t face font-lock-string-face)) . -32) (undo-tree-id2529 . -3) 35 (#("m" 0 1 (fontified t face font-lock-string-face)) . -35) (undo-tree-id2530 . -1) 36 (32 . 36) (#("Prox" 0 4 (fontified t face font-lock-string-face)) . -32) (undo-tree-id2531 . -4) 36 (32 . 36) (30 . 32) (t 25331 4334 784619 293000)) nil (25331 4350 482647 915000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . 48) (t 25331 4350 494533 86000)) nil (25331 4402 840050 593000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . 50)) nil (25331 4402 840047 730000) 0 nil])
([nil nil ((49 . 56) (#(" " 0 1 (fontified t face font-lock-string-face)) . -49) (undo-tree-id2547 . -1) 50) nil (25331 4402 840043 958000) 0 nil])
([nil nil ((67 . 68) (66 . 67) (#("\\varepsilon" 0 11 (fontified t face font-lock-string-face)) . 66) (undo-tree-id2546 . -11) 77 (58 . 77) (57 . 58)) nil (25331 4402 840038 790000) 0 nil])
([nil nil ((32 . 41)) nil (25331 4402 840034 41000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-string-face)) . -138) (undo-tree-id2533 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -139) (undo-tree-id2534 . -1) 140 (138 . 140) (119 . 138) (#("F" 0 1 (fontified t face font-lock-string-face)) . -119) (undo-tree-id2535 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -120) (undo-tree-id2536 . -1) 121 (120 . 121) (#("(" 0 1 (fontified t face font-lock-string-face)) . -120) (undo-tree-id2537 . -1) 121 (119 . 121) (#("`" 0 1 (fontified t face font-lock-string-face)) . -119) (undo-tree-id2538 . -1) 120 (117 . 120) (#(" " 0 1 (fontified nil face font-lock-string-face)) . 116) (undo-tree-id2539 . -1) (117 . 118) (#("`" 0 1 (fontified t face font-lock-string-face)) . -117) (undo-tree-id2540 . -1) (#("`" 0 1 (fontified t face font-lock-string-face)) . -118) (undo-tree-id2541 . -1) (#("`" 0 1 (fontified t face font-lock-string-face)) . -119) (undo-tree-id2542 . -1) 120 (117 . 120) (#("$" 0 1 (fontified t face font-lock-string-face)) . -117) (undo-tree-id2543 . -1) 118 (109 . 118) (#("c" 0 1 (fontified t face font-lock-string-face)) . -109) (undo-tree-id2544 . -1) 110 (100 . 110) (#("fu" 0 2 (fontified t face font-lock-string-face)) . -100) (undo-tree-id2545 . -2) 102 (101 . 102) (80 . 101) (79 . 80)) nil (25331 4402 840024 892000) 0 nil])
([nil nil ((121 . 122)) nil (25331 4402 839992 415000) 0 nil])
([nil nil ((130 . 131)) nil (25331 4402 839989 133000) 0 nil])
([nil nil ((162 . 164) (160 . 162) (139 . 160) (#("\\" 0 1 (fontified t face font-lock-string-face)) . -139) (undo-tree-id2532 . -1) 140) nil (25331 4402 839979 76000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-string-face)) . -168) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -169) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -170) (undo-tree-id2621 . -1) 171 (164 . 171) (t 25331 4402 854245 765000)) nil (25331 4406 223241 253000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-string-face)) . -172) (undo-tree-id2622 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -173) (undo-tree-id2623 . -1) 174 (166 . 174) (#("." 0 1 (fontified t face font-lock-string-face)) . -166) (undo-tree-id2624 . -1) 167 (166 . 167) (#(" " 0 1 (fontified t face font-lock-string-face)) . -166) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -167) (undo-tree-id2627 . -1) 168 (t 25331 4406 234227 217000)) nil (25331 4431 217415 634000) 0 nil])
([nil nil ((116 . 117)) nil (25331 4431 217589 260000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil face font-lock-string-face)) . 172) (undo-tree-id2643 . -1) (173 . 174)) nil (25331 4446 214627 392000) 0 nil] [nil nil ((nil rear-nonsticky nil 117 . 118) (#("
" 0 1 (face font-lock-string-face fontified nil)) . -338) (117 . 339)) ((#("
[^CPSV18]: Chizat, L., Peyré, G., Schmitzer, B., & Vialard, F.-X. (2018). [Scaling algorithms for unbalanced optimal transport problems](https://doi.org/10.1090/mcom/3303). Mathematics of Computation, 87(314), 2563–2609.
" 0 1 (rear-nonsticky nil fontified nil face font-lock-string-face) 1 221 (fontified nil face font-lock-string-face) 221 222 (face font-lock-string-face fontified nil)) . 117) (undo-tree-id2628 . -221) (undo-tree-id2629 . -1) (undo-tree-id2630 . -221) (undo-tree-id2631 . -1) (undo-tree-id2632 . 221) (undo-tree-id2633 . -2) (undo-tree-id2634 . 213) (undo-tree-id2635 . -10) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (338 . 339) (nil rear-nonsticky t 117 . 118)) (25331 4431 217374 9000) 0 nil])
([nil nil ((nil rear-nonsticky nil 173 . 174) (#("
" 0 1 (face font-lock-string-face fontified nil)) . -394) (173 . 395)) nil (25331 4446 214622 643000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t face font-lock-string-face)) . 117)) nil (25331 4446 214618 872000) 0 nil])
([nil nil ((171 . 181) (#("[" 0 1 (fontified t face font-lock-string-face)) . -171) (undo-tree-id2642 . -1) 172 (171 . 172)) nil (25331 4446 214615 100000) 0 nil])
([nil nil ((188 . 192) (#("consult " 0 8 (fontified t face font-lock-string-face)) . -188) (undo-tree-id2638 . -8) 196 (189 . 196) (168 . 189) (#("See " 0 4 (fontified t face font-lock-string-face)) . -168) (undo-tree-id2639 . -3) (undo-tree-id2640 . -3) (undo-tree-id2641 . -4) 172) nil (25331 4446 214602 249000) 0 nil])
([nil nil ((201 . 203) (t 25331 4446 230674 405000)) nil (25331 4448 165290 870000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 430) (t 25331 4448 180663 705000)) nil (25331 4468 20811 292000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-string-face)) . -17) (undo-tree-id2727 . -1) 18 (17 . 18) (t 25331 4456 810616 349000)) nil (25331 4471 353858 353000) 0 nil] [nil nil ((#("F" 0 1 (fontified t face font-lock-string-face)) . -16) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) 17 (t 25331 4456 810616 349000)) ((16 . 17)) (25331 4468 20135 508000) 0 nil])
([nil nil ((437 . 439) (#("F" 0 1 (fontified t face font-lock-function-name-face)) . -437) (undo-tree-id2728 . -1) 438 (t 25331 4471 370536 452000)) nil (25331 4476 868462 436000) 0 nil])
nil
([nil nil ((16 . 18) (#("F" 0 1 (fontified t face font-lock-string-face)) . 16)) nil (25331 4476 868431 915000) 0 nil])
([nil nil ((#("    proxdivF!(s, p, ε, λ) = (s .= (p ./ s) .^ (λ / (ε + λ)))
" 0 4 (fontified t) 4 13 (fontified t face font-lock-function-name-face) 13 61 (fontified t)) . 2246) (undo-tree-id2729 . -4) (undo-tree-id2730 . -4) (undo-tree-id2731 . -4) (undo-tree-id2732 . -4) (undo-tree-id2733 . -4) (undo-tree-id2734 . -4) (undo-tree-id2735 . -4) 2250 (t 25331 4476 883839 531000)) nil (25331 4485 960638 327000) 0 nil])
([nil nil ((2279 . 2281) (#("F" 0 1 (fontified t)) . 2279) (t 25331 4485 973789 651000)) nil (25331 4490 70987 50000) 0 nil])
([nil nil ((2329 . 2331) (#("F" 0 1 (fontified t)) . 2329)) nil (25331 4490 70974 339000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2502) (undo-tree-id2736 . -4) 2506 (2501 . 2506) (t 25331 4490 87100 412000)) nil (25331 4517 658563 645000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2506 . 2507) (#("
" 0 1 (fontified nil)) . -2552) (2502 . 2553)) nil (25331 4517 658541 226000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2502)) nil (25331 4517 658536 966000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t face font-lock-function-name-face)) . 2514)) nil (25331 4517 658526 1000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -2548) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) 2549 (t 25331 4517 673615 700000)) nil (25331 4521 622556 253000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2553 . 2554) (#("
" 0 1 (fontified nil)) . -2627) (2549 . 2628) 2516 (t 25331 4521 636927 284000)) nil (25331 4525 690530 591000) 0 nil])
([nil nil ((#("ν" 0 1 (fontified t)) . 2584) (t 25331 4525 706904 951000)) nil (25331 4528 829979 704000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2584)) nil (25331 4528 829976 281000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2584)) nil (25331 4528 829963 500000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t)) . 2594) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (t 25331 4528 843554 405000)) nil (25331 4531 355805 375000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 2594)) nil (25331 4531 355696 981000) 0 nil])
([nil nil ((2594 . 2595)) nil (25331 4531 355686 86000) 0 nil])
([nil nil ((#(", proxdivF2!" 0 12 (fontified t)) . 2596) (undo-tree-id2928 . -11) (undo-tree-id2929 . -11) (undo-tree-id2930 . -11) (undo-tree-id2931 . -12) (undo-tree-id2932 . -11) (undo-tree-id2933 . -10) (undo-tree-id2934 . -10) (undo-tree-id2935 . -10) (undo-tree-id2936 . -10) (undo-tree-id2937 . -10) (undo-tree-id2938 . -10) (undo-tree-id2939 . -10) (undo-tree-id2940 . -10) (undo-tree-id2941 . -10) (undo-tree-id2942 . -10) (undo-tree-id2943 . -10) (undo-tree-id2944 . -10) (undo-tree-id2945 . -10) (undo-tree-id2946 . -10) (undo-tree-id2947 . -10) (undo-tree-id2948 . -10) (undo-tree-id2949 . -10) (undo-tree-id2950 . -10) (undo-tree-id2951 . -10) (undo-tree-id2952 . -10) (undo-tree-id2953 . -10) (undo-tree-id2954 . -10) (undo-tree-id2955 . -10) (undo-tree-id2956 . -10) (undo-tree-id2957 . -10) (undo-tree-id2958 . -10) (undo-tree-id2959 . -10) (undo-tree-id2960 . -12) (undo-tree-id2961 . -12) (undo-tree-id2962 . -12) (undo-tree-id2963 . -12) (undo-tree-id2964 . -12) (undo-tree-id2965 . -12) (undo-tree-id2966 . -12) (undo-tree-id2967 . -12) (undo-tree-id2968 . -12) (undo-tree-id2969 . -12) (undo-tree-id2970 . -12) (undo-tree-id2971 . -12) (undo-tree-id2972 . -12) (undo-tree-id2973 . -12) (undo-tree-id2974 . -12) (undo-tree-id2975 . -12) (undo-tree-id2976 . -12) (undo-tree-id2977 . -12) (undo-tree-id2978 . -12) (undo-tree-id2979 . -12) (undo-tree-id2980 . -12) (undo-tree-id2981 . -12) (undo-tree-id2982 . -12) (undo-tree-id2983 . -12) (undo-tree-id2984 . -12) (undo-tree-id2985 . -12) (undo-tree-id2986 . -12) (undo-tree-id2987 . -11) (undo-tree-id2988 . -11) (undo-tree-id2989 . -11) (undo-tree-id2990 . -11) (undo-tree-id2991 . -11) (undo-tree-id2992 . -11) (undo-tree-id2993 . -11) (undo-tree-id2994 . -11) (undo-tree-id2995 . -11) (undo-tree-id2996 . -11) (undo-tree-id2997 . -11) (undo-tree-id2998 . -11) (undo-tree-id2999 . -11) (undo-tree-id3000 . -11) (undo-tree-id3001 . -11) (undo-tree-id3002 . -11) (undo-tree-id3003 . -11) (undo-tree-id3004 . -11) (undo-tree-id3005 . -11) (undo-tree-id3006 . -11) (undo-tree-id3007 . -11) (undo-tree-id3008 . -11) (undo-tree-id3009 . -11) (undo-tree-id3010 . -11) (undo-tree-id3011 . -11) (undo-tree-id3012 . -11) (undo-tree-id3013 . -11) (undo-tree-id3014 . -11) 2607 (t 25331 4531 370207 207000)) nil (25331 4533 661170 254000) 0 nil])
([nil nil ((10782 . 11348) (#("function sinkhorn_unbalanced2(
    μ, ν, C, λ1_or_proxdivF1, λ2_or_proxdivF2, ε; plan=nothing, kwargs...
)
    γ = if plan === nothing
        sinkhorn_unbalanced(μ, ν, C, λ1_or_proxdivF1, λ2_or_proxdivF2, ε; kwargs...)
    else
        # check dimensions
        size(C) == (length(μ), length(ν)) ||
            error(\"cost matrix `C` must be of size `(length(μ), length(ν))`\")
        size(plan) == size(C) || error(
            \"optimal transport plan `plan` and cost matrix `C` must be of the same size\",
        )
        plan
    end
    return dot(γ, C)
end

" 0 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 29 (fontified t face font-lock-function-name-face) 29 86 (fontified t) 86 93 (fontified t face font-lock-constant-face) 93 115 (fontified t) 115 117 (fontified t face font-lock-keyword-face) 117 127 (fontified t) 127 134 (fontified t face font-lock-constant-face) 134 224 (fontified t) 224 228 (fontified t face font-lock-keyword-face) 228 237 (fontified t) 237 239 (fontified t face font-lock-comment-delimiter-face) 239 251 (fontified t face font-lock-comment-face) 251 256 (fontified t face font-lock-comment-face) 256 261 (fontified t) 261 294 (fontified t) 294 301 (fontified t) 301 302 (fontified t) 302 319 (fontified t) 319 320 (fontified t face font-lock-string-face) 320 332 (fontified t face font-lock-string-face) 332 335 (fontified t face font-lock-string-face) 335 352 (fontified t face font-lock-string-face) 352 364 (fontified t face font-lock-string-face) 364 376 (fontified t face font-lock-string-face) 376 377 (fontified t face font-lock-string-face) 377 379 (fontified t) 379 388 (fontified t) 388 419 (fontified t) 419 431 (fontified t) 431 432 (fontified t face font-lock-string-face) 432 455 (fontified t face font-lock-string-face) 455 459 (fontified t face font-lock-string-face) 459 461 (fontified t face font-lock-string-face) 461 469 (fontified t face font-lock-string-face) 469 478 (fontified t face font-lock-string-face) 478 481 (fontified t face font-lock-string-face) 481 491 (fontified t face font-lock-string-face) 491 506 (fontified t face font-lock-string-face) 506 507 (fontified t face font-lock-string-face) 507 509 (fontified t) 509 533 (fontified t) 533 534 (fontified t) 534 536 (fontified t) 536 538 (fontified t face font-lock-keyword-face) 538 539 (fontified t face font-lock-keyword-face) 539 540 (fontified t) 540 544 (fontified t) 544 550 (fontified t face font-lock-keyword-face) 550 561 (fontified t) 561 564 (fontified t face font-lock-keyword-face) 564 565 (fontified t) 565 566 (fontified t)) . 10782) (t 25331 4533 676861 216000)) nil (25331 4546 668058 741000) 0 nil])
([nil nil ((nil rear-nonsticky nil 11347 . 11348) (#("
" 0 1 (fontified nil)) . -11912) (11347 . 11913)) nil (25331 4551 383024 522000) 0 nil] [nil nil ((nil rear-nonsticky nil 11358 . 11359) (nil fontified nil 11347 . 11359) (11347 . 11359)) ((#(", proxdivF2!" 0 11 (fontified nil) 11 12 (rear-nonsticky nil fontified nil)) . 11347) (undo-tree-id3015 . -11) (undo-tree-id3016 . -11) (undo-tree-id3017 . -11) (nil rear-nonsticky t 11358 . 11359)) (25331 4546 667883 439000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 11385) (t 25331 4551 396763 979000)) nil (25331 4553 530391 22000) 0 nil])
nil
([nil nil ((#("ν" 0 1 (fontified t)) . 11385)) nil (25331 4553 530386 761000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 11385)) nil (25331 4553 530374 469000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 11390) (t 25331 4553 546752 181000)) nil (25331 4563 100900 310000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 11402)) nil (25331 4563 101230 171000) 0 nil])
([nil nil ((#("λ2_or_proxdivf2, " 0 3 (fontified t) 3 17 (fontified t)) . 11404) (undo-tree-id3132 . -16) (undo-tree-id3133 . -16) (undo-tree-id3134 . -16) (undo-tree-id3135 . -16) 11420) nil (25331 4566 583212 656000) 0 nil] [nil nil ((#(", λ2_" 0 5 (fontified t)) . 11402) (undo-tree-id3018 . -4) (undo-tree-id3019 . -4) (undo-tree-id3020 . -3) (undo-tree-id3021 . -3) (undo-tree-id3022 . -3) (undo-tree-id3023 . -3) (undo-tree-id3024 . -3) (undo-tree-id3025 . -3) (undo-tree-id3026 . -3) (undo-tree-id3027 . -3) (undo-tree-id3028 . -3) (undo-tree-id3029 . -3) (undo-tree-id3030 . -3) (undo-tree-id3031 . -3) (undo-tree-id3032 . -3) (undo-tree-id3033 . -3) (undo-tree-id3034 . -3) (undo-tree-id3035 . -3) (undo-tree-id3036 . -3) (undo-tree-id3037 . -3) (undo-tree-id3038 . -3) (undo-tree-id3039 . -3) (undo-tree-id3040 . -3) (undo-tree-id3041 . -3) (undo-tree-id3042 . -3) (undo-tree-id3043 . -3) (undo-tree-id3044 . -3) (undo-tree-id3045 . -3) (undo-tree-id3046 . -3) (undo-tree-id3047 . -3) (undo-tree-id3048 . -2) (undo-tree-id3049 . -2) (undo-tree-id3050 . -2) (undo-tree-id3051 . -2) (undo-tree-id3052 . -2) (undo-tree-id3053 . -2) (undo-tree-id3054 . -2) (undo-tree-id3055 . -2) (undo-tree-id3056 . -2) (undo-tree-id3057 . -2) (undo-tree-id3058 . -2) (undo-tree-id3059 . -2) (undo-tree-id3060 . -2) (undo-tree-id3061 . -2) (undo-tree-id3062 . -2) (undo-tree-id3063 . -2) (undo-tree-id3064 . -2) (undo-tree-id3065 . -2) (undo-tree-id3066 . -2) (undo-tree-id3067 . -2) (undo-tree-id3068 . -2) (undo-tree-id3069 . -2) (undo-tree-id3070 . -2) (undo-tree-id3071 . -2) (undo-tree-id3072 . -2) (undo-tree-id3073 . -2) (undo-tree-id3074 . -2) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -5) (undo-tree-id3103 . -3) (undo-tree-id3104 . -3) (undo-tree-id3105 . -3) (undo-tree-id3106 . -3) (undo-tree-id3107 . -3) (undo-tree-id3108 . -3) (undo-tree-id3109 . -3) (undo-tree-id3110 . -3) (undo-tree-id3111 . -3) (undo-tree-id3112 . -3) (undo-tree-id3113 . -3) (undo-tree-id3114 . -3) (undo-tree-id3115 . -3) (undo-tree-id3116 . -3) (undo-tree-id3117 . -3) (undo-tree-id3118 . -3) (undo-tree-id3119 . -3) (undo-tree-id3120 . -3) (undo-tree-id3121 . -3) (undo-tree-id3122 . -3) (undo-tree-id3123 . -3) (undo-tree-id3124 . -3) (undo-tree-id3125 . -3) (undo-tree-id3126 . -3) (undo-tree-id3127 . -3) (undo-tree-id3128 . -3) (undo-tree-id3129 . -3) (undo-tree-id3130 . -3) (undo-tree-id3131 . -4) 11406) ((11402 . 11407)) (25331 4563 100879 288000) 0 nil])
([nil nil ((#("ν" 0 1 (fontified t)) . 11492) (t 25331 4566 600013 885000)) nil (25331 4581 56233 647000) 0 nil])
nil
([nil nil ((#("," 0 1 (fontified t)) . 11492)) nil (25331 4581 56230 295000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 11492)) nil (25331 4581 56227 851000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 11496)) nil (25331 4581 56224 428000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 11508)) nil (25331 4581 56221 146000) 0 nil])
([nil nil ((#("λ2_or_proxdivf2, " 0 17 (fontified t)) . 11510) (undo-tree-id3136 . -16) (undo-tree-id3137 . -16) (undo-tree-id3138 . -16) (undo-tree-id3139 . -16) 11526) nil (25331 4581 56211 578000) 0 nil])
([nil nil ((11598 . 11599) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 11598) (undo-tree-id3140 . -3) 11601 (11598 . 11601) (#("ν" 0 1 (fontified t)) . 11598) (t 25331 4581 69934 482000)) nil (25331 4584 948667 921000) 0 nil])
([nil nil ((11676 . 11677) (#("\\mu" 0 3 (fontified t face font-lock-string-face)) . 11676) (undo-tree-id3141 . -3) 11679 (11676 . 11679) (#("ν" 0 1 (fontified t face font-lock-string-face)) . 11676) (t 25331 4584 963246 451000)) nil (25331 4588 409890 14000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 9117) (t 25331 4588 426560 780000)) nil (25331 4727 465776 857000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-string-face)) . 9891) (t 25331 4727 482464 385000)) nil (25331 4853 140310 474000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-string-face)) . 9900)) nil (25331 4853 140296 646000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-string-face)) . 9696) (t 25331 4853 155108 97000)) nil (25331 4858 246327 391000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8960 . 8961) (#("
" 0 1 (fontified nil)) . -8971) (8956 . 8972) 8935 (t 25331 4858 255080 111000)) nil (25331 4900 126192 912000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 9419) (t 25331 4900 138183 613000)) nil (25331 5212 110203 394000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -9124) (undo-tree-id3144 . -1) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -9125) (undo-tree-id3145 . -1) 9126 (9124 . 9126) (t 25331 5212 123138 279000)) nil (25331 5309 218595 863000) 0 nil])
([nil nil ((9824 . 9826)) nil (25331 5309 218587 412000) 0 nil])
([nil nil ((9850 . 9870) (#("a" 0 1 (fontified t)) . -9850) (undo-tree-id3142 . -1) (#(" " 0 1 (fontified t)) . -9851) (undo-tree-id3143 . -1) 9852 (9850 . 9852) (9841 . 9850)) nil (25331 5309 218578 53000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -9886) (undo-tree-id3367 . -1) (#("0" 0 1 (fontified t)) . -9887) (undo-tree-id3368 . -1) (#("." 0 1 (fontified t)) . -9888) (undo-tree-id3369 . -1) 9889 (9879 . 9889) (9870 . 9879) (t 25331 5309 232605 396000)) nil (25331 5582 289743 282000) 0 nil])
([nil nil ((#("        @. a +=
" 0 15 (fontified t) 15 16 (fontified t)) . 9871) (undo-tree-id3360 . -14) (undo-tree-id3361 . 1) (undo-tree-id3362 . -14) (undo-tree-id3363 . -14) (undo-tree-id3364 . -14) (undo-tree-id3365 . -14) (undo-tree-id3366 . -14) 9885) nil (25331 5582 289735 41000) 0 nil])
([nil nil ((#("@" 0 1 (fontified t)) . 9850) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1)) nil (25331 5582 289722 260000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 9850)) nil (25331 5582 757737 585000) 0 nil])
([nil nil ((9850 . 9851)) nil (25331 5588 854445 387000) 0 nil] [nil nil ((#("         a = 0.5*(a + tmp)
" 0 27 (fontified t)) . 9842) (undo-tree-id3175 . -8) (undo-tree-id3176 . -8) (undo-tree-id3177 . -8) (undo-tree-id3178 . -25) (undo-tree-id3179 . -8) (undo-tree-id3180 . -27) (undo-tree-id3181 . -27) (undo-tree-id3182 . -27) (undo-tree-id3183 . -27) (undo-tree-id3184 . -27) (undo-tree-id3185 . -27) (undo-tree-id3186 . -27) (undo-tree-id3187 . -27) (undo-tree-id3188 . -27) (undo-tree-id3189 . -27) (undo-tree-id3190 . -27) (undo-tree-id3191 . -27) (undo-tree-id3192 . -27) (undo-tree-id3193 . -27) (undo-tree-id3194 . -8) (undo-tree-id3195 . -8) (undo-tree-id3196 . -8) (undo-tree-id3197 . -8) (undo-tree-id3198 . -8) (undo-tree-id3199 . -8) (undo-tree-id3200 . -8) (undo-tree-id3201 . -8) (undo-tree-id3202 . -8) (undo-tree-id3203 . -8) (undo-tree-id3204 . -8) (undo-tree-id3205 . -8) (undo-tree-id3206 . -8) (undo-tree-id3207 . -8) (undo-tree-id3208 . -8) (undo-tree-id3209 . -8) (undo-tree-id3210 . -8) (undo-tree-id3211 . -8) (undo-tree-id3212 . -8) (undo-tree-id3213 . -8) (undo-tree-id3214 . -8) (undo-tree-id3215 . -8) (undo-tree-id3216 . -8) (undo-tree-id3217 . -8) (undo-tree-id3218 . -8) (undo-tree-id3219 . -8) (undo-tree-id3220 . -8) (undo-tree-id3221 . -8) (undo-tree-id3222 . -8) (undo-tree-id3223 . -8) (undo-tree-id3224 . -8) (undo-tree-id3225 . -8) (undo-tree-id3226 . -8) (undo-tree-id3227 . -8) (undo-tree-id3228 . -8) (undo-tree-id3229 . -8) (undo-tree-id3230 . -8) (undo-tree-id3231 . -8) (undo-tree-id3232 . -8) (undo-tree-id3233 . -8) (undo-tree-id3234 . -8) (undo-tree-id3235 . -8) (undo-tree-id3236 . -8) (undo-tree-id3237 . -8) (undo-tree-id3238 . -8) (undo-tree-id3239 . -8) (undo-tree-id3240 . -8) (undo-tree-id3241 . -8) (undo-tree-id3242 . -8) (undo-tree-id3243 . -8) (undo-tree-id3244 . -8) (undo-tree-id3245 . -8) (undo-tree-id3246 . -8) (undo-tree-id3247 . -8) (undo-tree-id3248 . -8) (undo-tree-id3249 . -8) (undo-tree-id3250 . -8) (undo-tree-id3251 . -8) (undo-tree-id3252 . -8) (undo-tree-id3253 . -8) (undo-tree-id3254 . -8) (undo-tree-id3255 . -8) (undo-tree-id3256 . -8) (undo-tree-id3257 . -8) (undo-tree-id3258 . -8) (undo-tree-id3259 . -8) (undo-tree-id3260 . -8) (undo-tree-id3261 . -8) (undo-tree-id3262 . -8) (undo-tree-id3263 . -8) (undo-tree-id3264 . -8) (undo-tree-id3265 . -8) (undo-tree-id3266 . -8) (undo-tree-id3267 . -8) (undo-tree-id3268 . -8) (undo-tree-id3269 . -8) (undo-tree-id3270 . -8) (undo-tree-id3271 . -8) (undo-tree-id3272 . -8) (undo-tree-id3273 . -8) (undo-tree-id3274 . -8) (undo-tree-id3275 . -8) (undo-tree-id3276 . -8) (undo-tree-id3277 . -8) (undo-tree-id3278 . -8) (undo-tree-id3279 . -8) (undo-tree-id3280 . -8) (undo-tree-id3281 . -8) (undo-tree-id3282 . -8) (undo-tree-id3283 . -8) (undo-tree-id3284 . -8) (undo-tree-id3285 . -8) (undo-tree-id3286 . -8) (undo-tree-id3287 . -8) (undo-tree-id3288 . -8) (undo-tree-id3289 . -8) (undo-tree-id3290 . -8) (undo-tree-id3291 . -8) (undo-tree-id3292 . -8) (undo-tree-id3293 . -8) (undo-tree-id3294 . -8) (undo-tree-id3295 . -8) (undo-tree-id3296 . -8) (undo-tree-id3297 . -8) (undo-tree-id3298 . -8) (undo-tree-id3299 . -8) (undo-tree-id3300 . -8) (undo-tree-id3301 . -8) (undo-tree-id3302 . -27) (undo-tree-id3303 . -8) (undo-tree-id3304 . -8) (undo-tree-id3305 . -8) (undo-tree-id3306 . -8) (undo-tree-id3307 . -8) (undo-tree-id3308 . -8) (undo-tree-id3309 . -8) (undo-tree-id3310 . -8) (undo-tree-id3311 . -8) (undo-tree-id3312 . -8) (undo-tree-id3313 . -8) (undo-tree-id3314 . -8) (undo-tree-id3315 . -8) (undo-tree-id3316 . -8) (undo-tree-id3317 . -8) (undo-tree-id3318 . -8) (undo-tree-id3319 . -8) (undo-tree-id3320 . -8) (undo-tree-id3321 . -8) (undo-tree-id3322 . -8) (undo-tree-id3323 . -8) (undo-tree-id3324 . -8) (undo-tree-id3325 . -8) (undo-tree-id3326 . -8) (undo-tree-id3327 . -8) (undo-tree-id3328 . -8) (undo-tree-id3329 . -8) (undo-tree-id3330 . -8) (undo-tree-id3331 . -8) (undo-tree-id3332 . -8) 9850) ((9842 . 9869)) (25331 5582 412379 830000) 0 nil])
([nil nil ((#("        # copyto!(a, tmp)
" 0 8 (fontified t) 8 9 (fontified t face font-lock-comment-delimiter-face) 9 10 (fontified t face font-lock-comment-delimiter-face) 10 21 (fontified t face font-lock-comment-face) 21 26 (fontified t face font-lock-comment-face)) . 9816) (undo-tree-id3401 . -10) (undo-tree-id3402 . -10) (undo-tree-id3403 . -10) (undo-tree-id3404 . -10) (undo-tree-id3405 . -10) (undo-tree-id3406 . -10) 9826) nil (25331 5588 854435 749000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 9824)) ((9824 . 9825)) (25331 5582 303705 44000) 0 nil])
([nil nil ((9825 . 9826) (t 25331 5588 867737 581000)) nil (25331 5590 97789 847000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 9824)) ((9824 . 9825)) (25331 5582 290025 580000) 0 nil])
([nil nil ((#("# " 0 2 (fontified t face font-lock-comment-delimiter-face)) . -9824) (undo-tree-id3443 . -2) 9826 (#("Following " 0 10 (fontified t face font-lock-comment-face)) . -9826) (undo-tree-id3444 . -10) 9836 (#("the " 0 4 (fontified t face font-lock-comment-face)) . -9836) (undo-tree-id3445 . -4) 9840 (9826 . 9840) (#("Use " 0 4 (fontified t face font-lock-comment-face)) . -9826) (undo-tree-id3446 . -4) 9830 (#("a " 0 2 (fontified t face font-lock-comment-face)) . -9830) (undo-tree-id3447 . -2) 9832 (#("well" 0 4 (fontified t face font-lock-comment-face)) . -9832) (undo-tree-id3448 . -4) 9836 (9832 . 9836) (#("speed " 0 6 (fontified t face font-lock-comment-face)) . -9832) (undo-tree-id3449 . -6) 9838 (9826 . 9838) (#("U" 0 1 (fontified t face font-lock-comment-face)) . -9826) (undo-tree-id3450 . -1) 9827 (9826 . 9827) (#("Use " 0 4 (fontified t face font-lock-comment-face)) . -9826) (undo-tree-id3451 . -4) 9830 (9826 . 9830) (#("use " 0 4 (fontified t face font-lock-comment-face)) . -9826) (undo-tree-id3452 . -4) 9830 (9826 . 9830) (#("Use " 0 4 (fontified t face font-lock-comment-face)) . -9826) (undo-tree-id3453 . -4) 9830 (#("the " 0 4 (fontified t face font-lock-comment-face)) . -9830) (undo-tree-id3454 . -4) 9834 (9826 . 9834) (#("Fo" 0 2 (fontified t face font-lock-comment-face)) . -9826) (undo-tree-id3455 . -2) 9828 (9824 . 9828) (9815 . 9824) (t 25331 5590 111064 91000)) nil (25331 5627 894591 679000) 0 nil])
([nil nil ((9839 . 9844) (#("(" 0 1 (fontified t)) . -9839) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) 9840 (9835 . 9840)) ((#("0.5*(" 0 4 (fontified nil) 4 5 (fontified nil)) . 9835) (undo-tree-id3370 . -5) (undo-tree-id3371 . -5) (undo-tree-id3372 . -5) (undo-tree-id3373 . -5) (undo-tree-id3374 . -5) (undo-tree-id3375 . -5) (undo-tree-id3376 . -5) (undo-tree-id3377 . -5) (undo-tree-id3378 . -5) (undo-tree-id3379 . -5) (undo-tree-id3380 . -5) (undo-tree-id3381 . -5) (undo-tree-id3382 . -5) (undo-tree-id3383 . -5) (undo-tree-id3384 . -5) (undo-tree-id3385 . -5) (undo-tree-id3386 . -5) (undo-tree-id3387 . -5) (undo-tree-id3388 . -5) (undo-tree-id3389 . -5) (undo-tree-id3390 . -5) (undo-tree-id3391 . -5) (undo-tree-id3392 . -5) (undo-tree-id3393 . -5) (undo-tree-id3394 . -5) (undo-tree-id3395 . -5) (undo-tree-id3396 . -5) (undo-tree-id3397 . -5) (undo-tree-id3398 . -4) (9839 . 9840) (#("(a + " 0 5 (fontified t)) . 9839) (undo-tree-id3399 . -4) (undo-tree-id3400 . -4)) (25331 5582 289345 675000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 9816) (undo-tree-id3407 . -7) (undo-tree-id3408 . 1) (undo-tree-id3409 . -7) (undo-tree-id3410 . -7) (undo-tree-id3411 . -7) (undo-tree-id3412 . -9) (undo-tree-id3413 . -7) (undo-tree-id3414 . -7) (undo-tree-id3415 . -7) (undo-tree-id3416 . -7) (undo-tree-id3417 . -7) (undo-tree-id3418 . -7) (undo-tree-id3419 . -7) (undo-tree-id3420 . -7) (undo-tree-id3421 . -7) (undo-tree-id3422 . -7) (undo-tree-id3423 . -7) (undo-tree-id3424 . -7) (undo-tree-id3425 . -7) (undo-tree-id3426 . -7) (undo-tree-id3427 . -7) (undo-tree-id3428 . -7) (undo-tree-id3429 . -7) (undo-tree-id3430 . -7) (undo-tree-id3431 . -7) (undo-tree-id3432 . -7) (undo-tree-id3433 . -7) (undo-tree-id3434 . -7) (undo-tree-id3435 . -7) (undo-tree-id3436 . -7) (undo-tree-id3437 . -7) (undo-tree-id3438 . -7) (undo-tree-id3439 . -7) (undo-tree-id3440 . -7) (undo-tree-id3441 . -7) (undo-tree-id3442 . -7) 9823) nil (25331 5627 894551 730000) 0 nil])
nil
([nil nil ((11939 . 11941) (11938 . 11939) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 11938) (undo-tree-id3569 . -3) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -2) (undo-tree-id3598 . -2) (undo-tree-id3599 . -2) (undo-tree-id3600 . -2) (undo-tree-id3601 . -2) (undo-tree-id3602 . -2) (undo-tree-id3603 . -2) (undo-tree-id3604 . -2) (undo-tree-id3605 . -2) (undo-tree-id3606 . -2) (undo-tree-id3607 . -2) (undo-tree-id3608 . -2) (undo-tree-id3609 . -2) (undo-tree-id3610 . -2) (undo-tree-id3611 . -2) (undo-tree-id3612 . -2) (undo-tree-id3613 . -2) (undo-tree-id3614 . -2) (undo-tree-id3615 . -2) (undo-tree-id3616 . -2) (undo-tree-id3617 . -2) (undo-tree-id3618 . -2) (undo-tree-id3619 . -2) (undo-tree-id3620 . -2) (undo-tree-id3621 . -2) (undo-tree-id3622 . -2) (undo-tree-id3623 . -2) (undo-tree-id3624 . -3) (undo-tree-id3625 . -3) (undo-tree-id3626 . -3) (undo-tree-id3627 . -3) (undo-tree-id3628 . -3) (undo-tree-id3629 . -3) (undo-tree-id3630 . -3) (undo-tree-id3631 . -3) (undo-tree-id3632 . -3) (undo-tree-id3633 . -3) (undo-tree-id3634 . -3) (undo-tree-id3635 . -3) (undo-tree-id3636 . -3) (undo-tree-id3637 . -3) (undo-tree-id3638 . -3) (undo-tree-id3639 . -3) (undo-tree-id3640 . -3) (undo-tree-id3641 . -3) (undo-tree-id3642 . -3) (undo-tree-id3643 . -3) (undo-tree-id3644 . -3) (undo-tree-id3645 . -3) (undo-tree-id3646 . -3) (undo-tree-id3647 . -3) (undo-tree-id3648 . -3) (undo-tree-id3649 . -3) (undo-tree-id3650 . -3) (undo-tree-id3651 . -3) 11941 (11938 . 11941) (11937 . 11938) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 11937) (undo-tree-id3652 . -3) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -2) (undo-tree-id3681 . -2) (undo-tree-id3682 . -2) (undo-tree-id3683 . -2) (undo-tree-id3684 . -2) (undo-tree-id3685 . -2) (undo-tree-id3686 . -2) (undo-tree-id3687 . -2) (undo-tree-id3688 . -2) (undo-tree-id3689 . -2) (undo-tree-id3690 . -2) (undo-tree-id3691 . -2) (undo-tree-id3692 . -2) (undo-tree-id3693 . -2) (undo-tree-id3694 . -2) (undo-tree-id3695 . -2) (undo-tree-id3696 . -2) (undo-tree-id3697 . -2) (undo-tree-id3698 . -2) (undo-tree-id3699 . -2) (undo-tree-id3700 . -2) (undo-tree-id3701 . -2) (undo-tree-id3702 . -2) (undo-tree-id3703 . -2) (undo-tree-id3704 . -2) (undo-tree-id3705 . -2) (undo-tree-id3706 . -2) (undo-tree-id3707 . -3) (undo-tree-id3708 . -3) (undo-tree-id3709 . -3) (undo-tree-id3710 . -3) (undo-tree-id3711 . -3) (undo-tree-id3712 . -3) (undo-tree-id3713 . -3) (undo-tree-id3714 . -3) (undo-tree-id3715 . -3) (undo-tree-id3716 . -3) (undo-tree-id3717 . -3) (undo-tree-id3718 . -3) (undo-tree-id3719 . -3) (undo-tree-id3720 . -3) (undo-tree-id3721 . -3) (undo-tree-id3722 . -3) (undo-tree-id3723 . -3) (undo-tree-id3724 . -3) (undo-tree-id3725 . -3) (undo-tree-id3726 . -3) (undo-tree-id3727 . -3) (undo-tree-id3728 . -3) (undo-tree-id3729 . -3) (undo-tree-id3730 . -3) (undo-tree-id3731 . -3) (undo-tree-id3732 . -3) (undo-tree-id3733 . -3) (undo-tree-id3734 . -3) 11940 (11936 . 11940) (11934 . 11936) (11933 . 11934) (#("\\nu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 11933) (undo-tree-id3735 . -3) 11936 (11935 . 11936) (11933 . 11935) (#("," 0 1 (fontified t)) . -11933) (undo-tree-id3736 . -1) (#("\\" 0 1 (fontified t syntax-table (1))) . -11934) (undo-tree-id3737 . -1) 11935 (11933 . 11935) (11932 . 11933) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 11932) (undo-tree-id3738 . -3) 11935 (11929 . 11935) (11928 . 11929) (#("\\nu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 11928) (undo-tree-id3739 . -3) 11931 (11926 . 11931) (11925 . 11926) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 11925) (undo-tree-id3740 . -3) 11928 (11926 . 11928) (11905 . 11926) (11903 . 11905) (#("d" 0 1 (fontified t face font-lock-function-name-face)) . -11903) (undo-tree-id3741 . -1) (#("u" 0 1 (fontified t face font-lock-function-name-face)) . -11904) (undo-tree-id3742 . -1) (#("n" 0 1 (fontified t face font-lock-function-name-face)) . -11905) (undo-tree-id3743 . -1) 11906 (11904 . 11906) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -11904) (undo-tree-id3744 . -1) 11905 (11902 . 11905) (#("_" 0 1 (fontified t face font-lock-function-name-face)) . -11902) (undo-tree-id3745 . -1) 11903 (#("di" 0 2 (fontified t face font-lock-function-name-face)) . -11903) (undo-tree-id3746 . -2) 11905 (11903 . 11905) (#("s" 0 1 (fontified t face font-lock-function-name-face)) . -11903) (undo-tree-id3747 . -1) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -11904) (undo-tree-id3748 . -1) (#("n" 0 1 (fontified t face font-lock-function-name-face)) . -11905) (undo-tree-id3749 . -1) 11906 (11903 . 11906) (#("divergne" 0 8 (fontified t face font-lock-function-name-face)) . -11903) (undo-tree-id3750 . -8) 11911 (11906 . 11911) (11885 . 11906) (11884 . 11885) (t 25331 5627 907523 352000)) nil (25331 5697 957511 282000) 0 nil])
([nil nil ((#("μ" 0 1 (fontified t)) . 11938) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1)) nil (25331 5697 957173 41000) 0 nil])
([nil nil ((11955 . 11958) (11951 . 11955) (#("    " 0 4 (fontified nil)) . 11950) (undo-tree-id3483 . -4) (undo-tree-id3484 . -4) (undo-tree-id3485 . -4) (undo-tree-id3486 . -4) (undo-tree-id3487 . -4) (undo-tree-id3488 . -4) (undo-tree-id3489 . -4) (undo-tree-id3490 . -4) (undo-tree-id3491 . -4) (undo-tree-id3492 . -4) (undo-tree-id3493 . -4) (undo-tree-id3494 . -4) (undo-tree-id3495 . -4) (undo-tree-id3496 . -4) (undo-tree-id3497 . -4) (undo-tree-id3498 . -4) (undo-tree-id3499 . -4) (undo-tree-id3500 . -4) (undo-tree-id3501 . -4) (undo-tree-id3502 . -4) (undo-tree-id3503 . -4) (undo-tree-id3504 . -4) (undo-tree-id3505 . -4) (undo-tree-id3506 . -4) (undo-tree-id3507 . -4) (undo-tree-id3508 . -4) (undo-tree-id3509 . -4) (undo-tree-id3510 . -4) (undo-tree-id3511 . -4) (11949 . 11955) (11948 . 11949) (11947 . 11948) (#("\\lambda" 0 1 (fontified t syntax-table (1)) 1 7 (fontified t)) . 11947) (undo-tree-id3512 . -7) 11954 (11945 . 11954) (11944 . 11945) (#("\\varepsilon" 0 1 (fontified t syntax-table (1)) 1 11 (fontified t)) . 11944) (undo-tree-id3513 . -11) 11955 (11952 . 11955) (11942 . 11952) (11941 . 11942) (#("\\nu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 11941) (undo-tree-id3514 . -3) 11944 (11940 . 11944)) nil (25331 5697 957104 876000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -11951) (undo-tree-id3456 . -4) (undo-tree-id3457 . -4) (undo-tree-id3458 . -4) (undo-tree-id3459 . -4) (undo-tree-id3460 . -4) (undo-tree-id3461 . -4) (undo-tree-id3462 . -4) (undo-tree-id3463 . -4) (undo-tree-id3464 . -4) (undo-tree-id3465 . -4) (undo-tree-id3466 . -4) (undo-tree-id3467 . -4) (undo-tree-id3468 . -4) (undo-tree-id3469 . -4) (undo-tree-id3470 . -4) (undo-tree-id3471 . -4) (undo-tree-id3472 . -4) (undo-tree-id3473 . -4) (undo-tree-id3474 . -4) (undo-tree-id3475 . -4) (undo-tree-id3476 . -4) (undo-tree-id3477 . -4) (undo-tree-id3478 . -4) (undo-tree-id3479 . -4) (undo-tree-id3480 . -4) (undo-tree-id3481 . -4) (undo-tree-id3482 . -4) 11957) nil (25331 5697 957050 958000) 0 nil])
([nil nil ((11950 . 11954)) nil (25331 5697 956999 136000) 0 nil])
([nil nil ((11958 . 11959)) nil (25331 5697 956988 939000) 0 nil])
([nil nil ((11890 . 11892) (11888 . 11890) (11885 . 11888) (11884 . 11885) (t 25331 5697 973805 534000)) nil (25331 5756 537779 919000) 0 nil])
([nil nil ((11892 . 11893)) nil (25331 5756 537774 541000) 0 nil])
([nil nil ((nil rear-nonsticky nil 12047 . 12048) (nil fontified nil 11889 . 12048) (11889 . 12048)) nil (25331 5756 537770 211000) 0 nil])
([nil nil ((11889 . 11890)) nil (25331 5756 537759 315000) 0 nil])
([nil nil ((11891 . 11897) (11890 . 11891) (t 25331 5756 553484 81000)) nil (25331 5773 773664 273000) 0 nil])
([nil nil ((11896 . 11898)) nil (25331 5773 773659 594000) 0 nil])
([nil nil ((11899 . 11901)) nil (25331 5773 773655 753000) 0 nil])
([nil nil ((11891 . 11892)) nil (25331 5773 773646 115000) 0 nil])
([nil nil ((11889 . 11890) (t 25331 5773 790056 163000)) nil (25331 5789 965050 61000) 0 nil])
([nil nil ((11921 . 11941) (#("following " 0 10 (fontified t face font-lock-string-face)) . -11921) (undo-tree-id3751 . -10) 11931 (11919 . 11931) (#(" " 0 1 (fontified t face font-lock-string-face)) . -11919) (undo-tree-id3752 . -1) 11920 (11919 . 11920) (11898 . 11919) (#("e" 0 1 (fontified t face font-lock-string-face)) . -11898) (undo-tree-id3753 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -11899) (undo-tree-id3754 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -11900) (undo-tree-id3755 . -1) 11901 (11889 . 11901)) nil (25331 5789 965038 118000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -12184) (undo-tree-id3805 . -4) 12188 (t 25331 5789 983300 637000)) nil (25331 5927 662895 802000) 0 nil])
([nil nil ((12232 . 12233) (12231 . 12232) (#("\\varepsilon" 0 1 (fontified t syntax-table (1)) 1 11 (fontified t)) . 12231) (undo-tree-id3795 . -11) 12242 (12229 . 12242) (12228 . 12229) (#("\\lambda" 0 1 (fontified t syntax-table (1)) 1 7 (fontified t)) . 12228) (undo-tree-id3796 . -7) 12235 (12226 . 12235) (12225 . 12226) (#("\\lambda" 0 1 (fontified t syntax-table (1)) 1 7 (fontified t)) . 12225) (undo-tree-id3797 . -7) 12232 (12231 . 12232) (12223 . 12231) (12222 . 12223) (#("\\nu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12222) (undo-tree-id3798 . -3) 12225 (12222 . 12225) (12221 . 12222) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12221) (undo-tree-id3799 . -3) 12224 (12221 . 12224) (12218 . 12221) (12217 . 12218) (#("\\nu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12217) (undo-tree-id3800 . -3) 12220 (12215 . 12220) (12214 . 12215) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12214) (undo-tree-id3801 . -3) 12217 (12215 . 12217) (12194 . 12215) (#("sinkhon" 0 7 (fontified t)) . -12194) (undo-tree-id3802 . -7) 12201 (12191 . 12201) (12190 . 12191) (#("\\nu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12190) (undo-tree-id3803 . -3) 12193 (12190 . 12193) (12189 . 12190) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12189) (undo-tree-id3804 . -3) 12192 (12188 . 12192) (12184 . 12188)) nil (25331 5927 662884 837000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -12345) (undo-tree-id3772 . -1) (#(" " 0 1 (fontified t)) . -12346) (undo-tree-id3773 . -1) 12347 (12317 . 12347) (12316 . 12317) (12315 . 12316) (#("\\varepsilon" 0 1 (fontified t syntax-table (1)) 1 11 (fontified t)) . 12315) (undo-tree-id3774 . -11) (undo-tree-id3775 . -11) 12326 (#(")" 0 1 (fontified t)) . -12326) (undo-tree-id3776 . -1) (undo-tree-id3777 . 1) (undo-tree-id3778 . -1) 12327 (12322 . 12327) (12320 . 12322) (#("s" 0 1 (fontified t)) . -12320) (undo-tree-id3779 . -1) 12321 (12320 . 12321) (#("s" 0 1 (fontified t)) . -12320) (undo-tree-id3780 . -1) (#("p" 0 1 (fontified t)) . -12321) (undo-tree-id3781 . -1) 12322 (12313 . 12322) (12312 . 12313) (#("\\lambda" 0 1 (fontified t syntax-table (1)) 1 7 (fontified t)) . 12312) (undo-tree-id3782 . -7) 12319 (12310 . 12319) (12309 . 12310) (#("\\nu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12309) (undo-tree-id3783 . -3) 12312 (12306 . 12312) (12305 . 12306) (#("\\nu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12305) (undo-tree-id3784 . -3) 12308 (12305 . 12308) (#("\\" 0 1 (fontified t syntax-table (1))) . -12305) (undo-tree-id3785 . -1) 12306 (12285 . 12306) (#("sinkohrn" 0 8 (fontified t)) . -12285) (undo-tree-id3786 . -8) 12293 (12282 . 12293) (12281 . 12282) (#("\\nu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12281) (undo-tree-id3787 . -3) 12284 (12282 . 12284) (12280 . 12282) (12275 . 12280) (12274 . 12275) (12273 . 12274) (#("\\varepsilon" 0 1 (fontified t syntax-table (1)) 1 11 (fontified t)) . 12273) (undo-tree-id3788 . -11) 12284 (12280 . 12284) (#("o" 0 1 (fontified t)) . -12280) (undo-tree-id3789 . -1) (#("n" 0 1 (fontified t)) . -12281) (undo-tree-id3790 . -1) 12282 (12271 . 12282) (12270 . 12271) (#("\\lambda" 0 1 (fontified t syntax-table (1)) 1 7 (fontified t)) . 12270) (undo-tree-id3791 . -7) 12277 (12268 . 12277) (12267 . 12268) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12267) (undo-tree-id3792 . -3) 12270 (12264 . 12270) (12263 . 12264) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12263) (undo-tree-id3793 . -3) 12266 (12261 . 12266) (12240 . 12261) (12239 . 12240) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12239) (undo-tree-id3794 . -3) 12242 (12238 . 12242) (12233 . 12238)) nil (25331 5927 662749 694000) 0 nil])
([nil nil ((#("                           
" 0 27 (fontified t) 27 28 (fontified t)) . 12318) (undo-tree-id3765 . -26) (undo-tree-id3766 . 1) (undo-tree-id3767 . -26) (undo-tree-id3768 . -26) (undo-tree-id3769 . -26) (undo-tree-id3770 . -26) (undo-tree-id3771 . -26) 12344) nil (25331 5927 662693 472000) 0 nil])
([nil nil ((12347 . 12348) (12346 . 12347) (#("\\nu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12346) (undo-tree-id3756 . -3) 12349 (12342 . 12349) (12341 . 12342) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12341) (undo-tree-id3757 . -3) 12344 (12336 . 12344) (#("l" 0 1 (fontified t)) . -12336) (undo-tree-id3758 . -1) (#("5" 0 1 (fontified t)) . -12337) (undo-tree-id3759 . -1) 12338 (12332 . 12338) (12331 . 12332) (#("\\nu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12331) (undo-tree-id3760 . -3) 12334 (12331 . 12334) (12330 . 12331) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12330) (undo-tree-id3761 . -3) 12333 (12324 . 12333) (12322 . 12324) (#("return " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . -12322) (undo-tree-id3762 . -7) 12329 (12322 . 12329) (#("return " 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t)) . -12322) (undo-tree-id3763 . -7) 12329 (12322 . 12329) (12317 . 12322) (12316 . 12317) (#("0" 0 1 (fontified t)) . -12316) (undo-tree-id3764 . -1) 12317) nil (25331 5927 662675 383000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 12338)) nil (25331 5927 662626 844000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -12335) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (#("." 0 1 (fontified t)) . -12336) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (#("5" 0 1 (fontified t)) . -12337) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) 12338 (t 25331 5927 679211 704000)) nil (25331 6074 611759 8000) 0 nil])
([nil nil ((12364 . 12366) (12363 . 12364) (#("\\nu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12363) (undo-tree-id3807 . -3) 12366 (12355 . 12366) (12354 . 12355) (#("\\mu" 0 1 (fontified t syntax-table (1)) 1 3 (fontified t)) . 12354) (undo-tree-id3808 . -3) 12357 (12349 . 12357) (#("ε" 0 1 (fontified t)) . -12349) (undo-tree-id3809 . -1) (#("*" 0 1 (fontified t)) . -12350) (undo-tree-id3810 . -1) 12351 (12350 . 12351) (#("(" 0 1 (fontified t)) . -12350) (undo-tree-id3811 . -1) 12351 (12350 . 12351) (#("*" 0 1 (fontified t)) . -12350) (undo-tree-id3812 . -1) 12351 (12350 . 12351) (12349 . 12350) (#("\\varepsilon" 0 1 (fontified t syntax-table (1)) 1 11 (fontified t)) . 12349) (undo-tree-id3813 . -11) 12360 (12344 . 12360)) nil (25331 6074 611738 265000) 0 nil])
([nil nil ((12368 . 12370) (12367 . 12368) (#("\\varepsilon" 0 1 (fontified t syntax-table (1)) 1 11 (fontified t)) . 12367) (undo-tree-id3806 . -11) 12378 (12366 . 12378)) nil (25331 6074 611703 344000) 0 nil])
([nil nil ((12366 . 12368) (t 25331 6074 625072 14000)) nil (25331 6120 56196 429000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 12368) (undo-tree-id4147 . 1)) nil (25331 6120 56192 518000) 0 nil])
([nil nil ((#("ε" 0 1 (fontified t)) . 12368) (undo-tree-id4146 . 1)) nil (25331 6120 56187 210000) 0 nil])
([nil nil ((12350 . 12351) (12349 . 12350) (#("\\varepsilon" 0 1 (fontified t syntax-table (1)) 1 11 (fontified t)) . 12349) (undo-tree-id3820 . -11) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -2) (undo-tree-id3849 . -2) (undo-tree-id3850 . -2) (undo-tree-id3851 . -2) (undo-tree-id3852 . -2) (undo-tree-id3853 . -2) (undo-tree-id3854 . -2) (undo-tree-id3855 . -2) (undo-tree-id3856 . -2) (undo-tree-id3857 . -2) (undo-tree-id3858 . -2) (undo-tree-id3859 . -2) (undo-tree-id3860 . -2) (undo-tree-id3861 . -2) (undo-tree-id3862 . -2) (undo-tree-id3863 . -2) (undo-tree-id3864 . -2) (undo-tree-id3865 . -2) (undo-tree-id3866 . -2) (undo-tree-id3867 . -2) (undo-tree-id3868 . -2) (undo-tree-id3869 . -2) (undo-tree-id3870 . -2) (undo-tree-id3871 . -2) (undo-tree-id3872 . -2) (undo-tree-id3873 . -2) (undo-tree-id3874 . -2) (undo-tree-id3875 . -2) (undo-tree-id3876 . -2) (undo-tree-id3877 . -2) (undo-tree-id3878 . -2) (undo-tree-id3879 . -2) (undo-tree-id3880 . -2) (undo-tree-id3881 . -2) (undo-tree-id3882 . -2) (undo-tree-id3883 . -2) (undo-tree-id3884 . -2) (undo-tree-id3885 . -2) (undo-tree-id3886 . -2) (undo-tree-id3887 . -2) (undo-tree-id3888 . -2) (undo-tree-id3889 . -2) (undo-tree-id3890 . -2) (undo-tree-id3891 . -2) (undo-tree-id3892 . -2) (undo-tree-id3893 . -2) (undo-tree-id3894 . -2) (undo-tree-id3895 . -2) (undo-tree-id3896 . -2) (undo-tree-id3897 . -2) (undo-tree-id3898 . -2) (undo-tree-id3899 . -2) (undo-tree-id3900 . -2) (undo-tree-id3901 . -2) (undo-tree-id3902 . -3) (undo-tree-id3903 . -3) (undo-tree-id3904 . -3) (undo-tree-id3905 . -3) (undo-tree-id3906 . -3) (undo-tree-id3907 . -3) (undo-tree-id3908 . -3) (undo-tree-id3909 . -3) (undo-tree-id3910 . -3) (undo-tree-id3911 . -3) (undo-tree-id3912 . -3) (undo-tree-id3913 . -3) (undo-tree-id3914 . -3) (undo-tree-id3915 . -3) (undo-tree-id3916 . -3) (undo-tree-id3917 . -3) (undo-tree-id3918 . -3) (undo-tree-id3919 . -3) (undo-tree-id3920 . -3) (undo-tree-id3921 . -3) (undo-tree-id3922 . -3) (undo-tree-id3923 . -3) (undo-tree-id3924 . -3) (undo-tree-id3925 . -3) (undo-tree-id3926 . -3) (undo-tree-id3927 . -3) (undo-tree-id3928 . -3) (undo-tree-id3929 . -4) (undo-tree-id3930 . -4) (undo-tree-id3931 . -4) (undo-tree-id3932 . -4) (undo-tree-id3933 . -4) (undo-tree-id3934 . -4) (undo-tree-id3935 . -4) (undo-tree-id3936 . -4) (undo-tree-id3937 . -4) (undo-tree-id3938 . -4) (undo-tree-id3939 . -4) (undo-tree-id3940 . -4) (undo-tree-id3941 . -4) (undo-tree-id3942 . -4) (undo-tree-id3943 . -4) (undo-tree-id3944 . -4) (undo-tree-id3945 . -4) (undo-tree-id3946 . -4) (undo-tree-id3947 . -4) (undo-tree-id3948 . -4) (undo-tree-id3949 . -4) (undo-tree-id3950 . -4) (undo-tree-id3951 . -4) (undo-tree-id3952 . -4) (undo-tree-id3953 . -4) (undo-tree-id3954 . -4) (undo-tree-id3955 . -4) (undo-tree-id3956 . -5) (undo-tree-id3957 . -5) (undo-tree-id3958 . -5) (undo-tree-id3959 . -5) (undo-tree-id3960 . -5) (undo-tree-id3961 . -5) (undo-tree-id3962 . -5) (undo-tree-id3963 . -5) (undo-tree-id3964 . -5) (undo-tree-id3965 . -5) (undo-tree-id3966 . -5) (undo-tree-id3967 . -5) (undo-tree-id3968 . -5) (undo-tree-id3969 . -5) (undo-tree-id3970 . -5) (undo-tree-id3971 . -5) (undo-tree-id3972 . -5) (undo-tree-id3973 . -5) (undo-tree-id3974 . -5) (undo-tree-id3975 . -5) (undo-tree-id3976 . -5) (undo-tree-id3977 . -5) (undo-tree-id3978 . -5) (undo-tree-id3979 . -5) (undo-tree-id3980 . -5) (undo-tree-id3981 . -5) (undo-tree-id3982 . -5) (undo-tree-id3983 . -6) (undo-tree-id3984 . -6) (undo-tree-id3985 . -6) (undo-tree-id3986 . -6) (undo-tree-id3987 . -6) (undo-tree-id3988 . -6) (undo-tree-id3989 . -6) (undo-tree-id3990 . -6) (undo-tree-id3991 . -6) (undo-tree-id3992 . -6) (undo-tree-id3993 . -6) (undo-tree-id3994 . -6) (undo-tree-id3995 . -6) (undo-tree-id3996 . -6) (undo-tree-id3997 . -6) (undo-tree-id3998 . -6) (undo-tree-id3999 . -6) (undo-tree-id4000 . -6) (undo-tree-id4001 . -6) (undo-tree-id4002 . -6) (undo-tree-id4003 . -6) (undo-tree-id4004 . -6) (undo-tree-id4005 . -6) (undo-tree-id4006 . -6) (undo-tree-id4007 . -6) (undo-tree-id4008 . -6) (undo-tree-id4009 . -6) (undo-tree-id4010 . -7) (undo-tree-id4011 . -7) (undo-tree-id4012 . -7) (undo-tree-id4013 . -7) (undo-tree-id4014 . -7) (undo-tree-id4015 . -7) (undo-tree-id4016 . -7) (undo-tree-id4017 . -7) (undo-tree-id4018 . -7) (undo-tree-id4019 . -7) (undo-tree-id4020 . -7) (undo-tree-id4021 . -7) (undo-tree-id4022 . -7) (undo-tree-id4023 . -7) (undo-tree-id4024 . -7) (undo-tree-id4025 . -7) (undo-tree-id4026 . -7) (undo-tree-id4027 . -7) (undo-tree-id4028 . -7) (undo-tree-id4029 . -7) (undo-tree-id4030 . -7) (undo-tree-id4031 . -7) (undo-tree-id4032 . -7) (undo-tree-id4033 . -7) (undo-tree-id4034 . -7) (undo-tree-id4035 . -7) (undo-tree-id4036 . -7) (undo-tree-id4037 . -8) (undo-tree-id4038 . -8) (undo-tree-id4039 . -8) (undo-tree-id4040 . -8) (undo-tree-id4041 . -8) (undo-tree-id4042 . -8) (undo-tree-id4043 . -8) (undo-tree-id4044 . -8) (undo-tree-id4045 . -8) (undo-tree-id4046 . -8) (undo-tree-id4047 . -8) (undo-tree-id4048 . -8) (undo-tree-id4049 . -8) (undo-tree-id4050 . -8) (undo-tree-id4051 . -8) (undo-tree-id4052 . -8) (undo-tree-id4053 . -8) (undo-tree-id4054 . -8) (undo-tree-id4055 . -8) (undo-tree-id4056 . -8) (undo-tree-id4057 . -8) (undo-tree-id4058 . -8) (undo-tree-id4059 . -8) (undo-tree-id4060 . -8) (undo-tree-id4061 . -8) (undo-tree-id4062 . -8) (undo-tree-id4063 . -8) (undo-tree-id4064 . -9) (undo-tree-id4065 . -9) (undo-tree-id4066 . -9) (undo-tree-id4067 . -9) (undo-tree-id4068 . -9) (undo-tree-id4069 . -9) (undo-tree-id4070 . -9) (undo-tree-id4071 . -9) (undo-tree-id4072 . -9) (undo-tree-id4073 . -9) (undo-tree-id4074 . -9) (undo-tree-id4075 . -9) (undo-tree-id4076 . -9) (undo-tree-id4077 . -9) (undo-tree-id4078 . -9) (undo-tree-id4079 . -9) (undo-tree-id4080 . -9) (undo-tree-id4081 . -9) (undo-tree-id4082 . -9) (undo-tree-id4083 . -9) (undo-tree-id4084 . -9) (undo-tree-id4085 . -9) (undo-tree-id4086 . -9) (undo-tree-id4087 . -9) (undo-tree-id4088 . -9) (undo-tree-id4089 . -9) (undo-tree-id4090 . -9) (undo-tree-id4091 . -10) (undo-tree-id4092 . -10) (undo-tree-id4093 . -10) (undo-tree-id4094 . -10) (undo-tree-id4095 . -10) (undo-tree-id4096 . -10) (undo-tree-id4097 . -10) (undo-tree-id4098 . -10) (undo-tree-id4099 . -10) (undo-tree-id4100 . -10) (undo-tree-id4101 . -10) (undo-tree-id4102 . -10) (undo-tree-id4103 . -10) (undo-tree-id4104 . -10) (undo-tree-id4105 . -10) (undo-tree-id4106 . -10) (undo-tree-id4107 . -10) (undo-tree-id4108 . -10) (undo-tree-id4109 . -10) (undo-tree-id4110 . -10) (undo-tree-id4111 . -10) (undo-tree-id4112 . -10) (undo-tree-id4113 . -10) (undo-tree-id4114 . -10) (undo-tree-id4115 . -10) (undo-tree-id4116 . -10) (undo-tree-id4117 . -10) (undo-tree-id4118 . -11) (undo-tree-id4119 . -11) (undo-tree-id4120 . -11) (undo-tree-id4121 . -11) (undo-tree-id4122 . -11) (undo-tree-id4123 . -11) (undo-tree-id4124 . -11) (undo-tree-id4125 . -11) (undo-tree-id4126 . -11) (undo-tree-id4127 . -11) (undo-tree-id4128 . -11) (undo-tree-id4129 . -11) (undo-tree-id4130 . -11) (undo-tree-id4131 . -11) (undo-tree-id4132 . -11) (undo-tree-id4133 . -11) (undo-tree-id4134 . -11) (undo-tree-id4135 . -11) (undo-tree-id4136 . -11) (undo-tree-id4137 . -11) (undo-tree-id4138 . -11) (undo-tree-id4139 . -11) (undo-tree-id4140 . -11) (undo-tree-id4141 . -11) (undo-tree-id4142 . -11) (undo-tree-id4143 . -11) (undo-tree-id4144 . -11) (undo-tree-id4145 . -11) 12360 (12349 . 12360)) nil (25331 6120 56155 223000) 0 nil])
([nil nil ((12181 . 12182) (#("\\varepsilon" 0 1 (fontified t syntax-table (1)) 1 11 (fontified t)) . 12181) (undo-tree-id4148 . -11) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -2) (undo-tree-id4177 . -2) (undo-tree-id4178 . -2) (undo-tree-id4179 . -2) (undo-tree-id4180 . -2) (undo-tree-id4181 . -2) (undo-tree-id4182 . -2) (undo-tree-id4183 . -2) (undo-tree-id4184 . -2) (undo-tree-id4185 . -2) (undo-tree-id4186 . -2) (undo-tree-id4187 . -2) (undo-tree-id4188 . -2) (undo-tree-id4189 . -2) (undo-tree-id4190 . -2) (undo-tree-id4191 . -2) (undo-tree-id4192 . -2) (undo-tree-id4193 . -2) (undo-tree-id4194 . -2) (undo-tree-id4195 . -2) (undo-tree-id4196 . -2) (undo-tree-id4197 . -2) (undo-tree-id4198 . -2) (undo-tree-id4199 . -2) (undo-tree-id4200 . -2) (undo-tree-id4201 . -2) (undo-tree-id4202 . -2) (undo-tree-id4203 . -3) (undo-tree-id4204 . -3) (undo-tree-id4205 . -3) (undo-tree-id4206 . -3) (undo-tree-id4207 . -3) (undo-tree-id4208 . -3) (undo-tree-id4209 . -3) (undo-tree-id4210 . -3) (undo-tree-id4211 . -3) (undo-tree-id4212 . -3) (undo-tree-id4213 . -3) (undo-tree-id4214 . -3) (undo-tree-id4215 . -3) (undo-tree-id4216 . -3) (undo-tree-id4217 . -3) (undo-tree-id4218 . -3) (undo-tree-id4219 . -3) (undo-tree-id4220 . -3) (undo-tree-id4221 . -3) (undo-tree-id4222 . -3) (undo-tree-id4223 . -3) (undo-tree-id4224 . -3) (undo-tree-id4225 . -3) (undo-tree-id4226 . -3) (undo-tree-id4227 . -3) (undo-tree-id4228 . -3) (undo-tree-id4229 . -3) (undo-tree-id4230 . -4) (undo-tree-id4231 . -4) (undo-tree-id4232 . -4) (undo-tree-id4233 . -4) (undo-tree-id4234 . -4) (undo-tree-id4235 . -4) (undo-tree-id4236 . -4) (undo-tree-id4237 . -4) (undo-tree-id4238 . -4) (undo-tree-id4239 . -4) (undo-tree-id4240 . -4) (undo-tree-id4241 . -4) (undo-tree-id4242 . -4) (undo-tree-id4243 . -4) (undo-tree-id4244 . -4) (undo-tree-id4245 . -4) (undo-tree-id4246 . -4) (undo-tree-id4247 . -4) (undo-tree-id4248 . -4) (undo-tree-id4249 . -4) (undo-tree-id4250 . -4) (undo-tree-id4251 . -4) (undo-tree-id4252 . -4) (undo-tree-id4253 . -4) (undo-tree-id4254 . -4) (undo-tree-id4255 . -4) (undo-tree-id4256 . -4) (undo-tree-id4257 . -5) (undo-tree-id4258 . -5) (undo-tree-id4259 . -5) (undo-tree-id4260 . -5) (undo-tree-id4261 . -5) (undo-tree-id4262 . -5) (undo-tree-id4263 . -5) (undo-tree-id4264 . -5) (undo-tree-id4265 . -5) (undo-tree-id4266 . -5) (undo-tree-id4267 . -5) (undo-tree-id4268 . -5) (undo-tree-id4269 . -5) (undo-tree-id4270 . -5) (undo-tree-id4271 . -5) (undo-tree-id4272 . -5) (undo-tree-id4273 . -5) (undo-tree-id4274 . -5) (undo-tree-id4275 . -5) (undo-tree-id4276 . -5) (undo-tree-id4277 . -5) (undo-tree-id4278 . -5) (undo-tree-id4279 . -5) (undo-tree-id4280 . -5) (undo-tree-id4281 . -5) (undo-tree-id4282 . -5) (undo-tree-id4283 . -5) (undo-tree-id4284 . -6) (undo-tree-id4285 . -6) (undo-tree-id4286 . -6) (undo-tree-id4287 . -6) (undo-tree-id4288 . -6) (undo-tree-id4289 . -6) (undo-tree-id4290 . -6) (undo-tree-id4291 . -6) (undo-tree-id4292 . -6) (undo-tree-id4293 . -6) (undo-tree-id4294 . -6) (undo-tree-id4295 . -6) (undo-tree-id4296 . -6) (undo-tree-id4297 . -6) (undo-tree-id4298 . -6) (undo-tree-id4299 . -6) (undo-tree-id4300 . -6) (undo-tree-id4301 . -6) (undo-tree-id4302 . -6) (undo-tree-id4303 . -6) (undo-tree-id4304 . -6) (undo-tree-id4305 . -6) (undo-tree-id4306 . -6) (undo-tree-id4307 . -6) (undo-tree-id4308 . -6) (undo-tree-id4309 . -6) (undo-tree-id4310 . -6) (undo-tree-id4311 . -7) (undo-tree-id4312 . -7) (undo-tree-id4313 . -7) (undo-tree-id4314 . -7) (undo-tree-id4315 . -7) (undo-tree-id4316 . -7) (undo-tree-id4317 . -7) (undo-tree-id4318 . -7) (undo-tree-id4319 . -7) (undo-tree-id4320 . -7) (undo-tree-id4321 . -7) (undo-tree-id4322 . -7) (undo-tree-id4323 . -7) (undo-tree-id4324 . -7) (undo-tree-id4325 . -7) (undo-tree-id4326 . -7) (undo-tree-id4327 . -7) (undo-tree-id4328 . -7) (undo-tree-id4329 . -7) (undo-tree-id4330 . -7) (undo-tree-id4331 . -7) (undo-tree-id4332 . -7) (undo-tree-id4333 . -7) (undo-tree-id4334 . -7) (undo-tree-id4335 . -7) (undo-tree-id4336 . -7) (undo-tree-id4337 . -7) (undo-tree-id4338 . -8) (undo-tree-id4339 . -8) (undo-tree-id4340 . -8) (undo-tree-id4341 . -8) (undo-tree-id4342 . -8) (undo-tree-id4343 . -8) (undo-tree-id4344 . -8) (undo-tree-id4345 . -8) (undo-tree-id4346 . -8) (undo-tree-id4347 . -8) (undo-tree-id4348 . -8) (undo-tree-id4349 . -8) (undo-tree-id4350 . -8) (undo-tree-id4351 . -8) (undo-tree-id4352 . -8) (undo-tree-id4353 . -8) (undo-tree-id4354 . -8) (undo-tree-id4355 . -8) (undo-tree-id4356 . -8) (undo-tree-id4357 . -8) (undo-tree-id4358 . -8) (undo-tree-id4359 . -8) (undo-tree-id4360 . -8) (undo-tree-id4361 . -8) (undo-tree-id4362 . -8) (undo-tree-id4363 . -8) (undo-tree-id4364 . -8) (undo-tree-id4365 . -9) (undo-tree-id4366 . -9) (undo-tree-id4367 . -9) (undo-tree-id4368 . -9) (undo-tree-id4369 . -9) (undo-tree-id4370 . -9) (undo-tree-id4371 . -9) (undo-tree-id4372 . -9) (undo-tree-id4373 . -9) (undo-tree-id4374 . -9) (undo-tree-id4375 . -9) (undo-tree-id4376 . -9) (undo-tree-id4377 . -9) (undo-tree-id4378 . -9) (undo-tree-id4379 . -9) (undo-tree-id4380 . -9) (undo-tree-id4381 . -9) (undo-tree-id4382 . -9) (undo-tree-id4383 . -9) (undo-tree-id4384 . -9) (undo-tree-id4385 . -9) (undo-tree-id4386 . -9) (undo-tree-id4387 . -9) (undo-tree-id4388 . -9) (undo-tree-id4389 . -9) (undo-tree-id4390 . -9) (undo-tree-id4391 . -9) (undo-tree-id4392 . -10) (undo-tree-id4393 . -10) (undo-tree-id4394 . -10) (undo-tree-id4395 . -10) (undo-tree-id4396 . -10) (undo-tree-id4397 . -10) (undo-tree-id4398 . -10) (undo-tree-id4399 . -10) (undo-tree-id4400 . -10) (undo-tree-id4401 . -10) (undo-tree-id4402 . -10) (undo-tree-id4403 . -10) (undo-tree-id4404 . -10) (undo-tree-id4405 . -10) (undo-tree-id4406 . -10) (undo-tree-id4407 . -10) (undo-tree-id4408 . -10) (undo-tree-id4409 . -10) (undo-tree-id4410 . -10) (undo-tree-id4411 . -10) (undo-tree-id4412 . -10) (undo-tree-id4413 . -10) (undo-tree-id4414 . -10) (undo-tree-id4415 . -10) (undo-tree-id4416 . -10) (undo-tree-id4417 . -10) (undo-tree-id4418 . -10) (undo-tree-id4419 . -11) (undo-tree-id4420 . -11) (undo-tree-id4421 . -11) (undo-tree-id4422 . -11) (undo-tree-id4423 . -11) (undo-tree-id4424 . -11) (undo-tree-id4425 . -11) (undo-tree-id4426 . -11) (undo-tree-id4427 . -11) (undo-tree-id4428 . -11) (undo-tree-id4429 . -11) (undo-tree-id4430 . -11) (undo-tree-id4431 . -11) (undo-tree-id4432 . -11) (undo-tree-id4433 . -11) (undo-tree-id4434 . -11) (undo-tree-id4435 . -11) (undo-tree-id4436 . -11) (undo-tree-id4437 . -11) (undo-tree-id4438 . -11) (undo-tree-id4439 . -11) (undo-tree-id4440 . -11) (undo-tree-id4441 . -11) (undo-tree-id4442 . -11) (undo-tree-id4443 . -11) (undo-tree-id4444 . -11) (undo-tree-id4445 . -11) (undo-tree-id4446 . -11) 12192 (12179 . 12192) (12178 . 12179) (#("\\lambda" 0 1 (fontified t syntax-table (1)) 1 7 (fontified t)) . 12178) (undo-tree-id4447 . -7) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (undo-tree-id4475 . -2) (undo-tree-id4476 . -2) (undo-tree-id4477 . -2) (undo-tree-id4478 . -2) (undo-tree-id4479 . -2) (undo-tree-id4480 . -2) (undo-tree-id4481 . -2) (undo-tree-id4482 . -2) (undo-tree-id4483 . -2) (undo-tree-id4484 . -2) (undo-tree-id4485 . -2) (undo-tree-id4486 . -2) (undo-tree-id4487 . -2) (undo-tree-id4488 . -2) (undo-tree-id4489 . -2) (undo-tree-id4490 . -2) (undo-tree-id4491 . -2) (undo-tree-id4492 . -2) (undo-tree-id4493 . -2) (undo-tree-id4494 . -2) (undo-tree-id4495 . -2) (undo-tree-id4496 . -2) (undo-tree-id4497 . -2) (undo-tree-id4498 . -2) (undo-tree-id4499 . -2) (undo-tree-id4500 . -2) (undo-tree-id4501 . -2) (undo-tree-id4502 . -3) (undo-tree-id4503 . -3) (undo-tree-id4504 . -3) (undo-tree-id4505 . -3) (undo-tree-id4506 . -3) (undo-tree-id4507 . -3) (undo-tree-id4508 . -3) (undo-tree-id4509 . -3) (undo-tree-id4510 . -3) (undo-tree-id4511 . -3) (undo-tree-id4512 . -3) (undo-tree-id4513 . -3) (undo-tree-id4514 . -3) (undo-tree-id4515 . -3) (undo-tree-id4516 . -3) (undo-tree-id4517 . -3) (undo-tree-id4518 . -3) (undo-tree-id4519 . -3) (undo-tree-id4520 . -3) (undo-tree-id4521 . -3) (undo-tree-id4522 . -3) (undo-tree-id4523 . -3) (undo-tree-id4524 . -3) (undo-tree-id4525 . -3) (undo-tree-id4526 . -3) (undo-tree-id4527 . -3) (undo-tree-id4528 . -3) (undo-tree-id4529 . -4) (undo-tree-id4530 . -4) (undo-tree-id4531 . -4) (undo-tree-id4532 . -4) (undo-tree-id4533 . -4) (undo-tree-id4534 . -4) (undo-tree-id4535 . -4) (undo-tree-id4536 . -4) (undo-tree-id4537 . -4) (undo-tree-id4538 . -4) (undo-tree-id4539 . -4) (undo-tree-id4540 . -4) (undo-tree-id4541 . -4) (undo-tree-id4542 . -4) (undo-tree-id4543 . -4) (undo-tree-id4544 . -4) (undo-tree-id4545 . -4) (undo-tree-id4546 . -4) (undo-tree-id4547 . -4) (undo-tree-id4548 . -4) (undo-tree-id4549 . -4) (undo-tree-id4550 . -4) (undo-tree-id4551 . -4) (undo-tree-id4552 . -4) (undo-tree-id4553 . -4) (undo-tree-id4554 . -4) (undo-tree-id4555 . -4) (undo-tree-id4556 . -5) (undo-tree-id4557 . -5) (undo-tree-id4558 . -5) (undo-tree-id4559 . -5) (undo-tree-id4560 . -5) (undo-tree-id4561 . -5) (undo-tree-id4562 . -5) (undo-tree-id4563 . -5) (undo-tree-id4564 . -5) (undo-tree-id4565 . -5) (undo-tree-id4566 . -5) (undo-tree-id4567 . -5) (undo-tree-id4568 . -5) (undo-tree-id4569 . -5) (undo-tree-id4570 . -5) (undo-tree-id4571 . -5) (undo-tree-id4572 . -5) (undo-tree-id4573 . -5) (undo-tree-id4574 . -5) (undo-tree-id4575 . -5) (undo-tree-id4576 . -5) (undo-tree-id4577 . -5) (undo-tree-id4578 . -5) (undo-tree-id4579 . -5) (undo-tree-id4580 . -5) (undo-tree-id4581 . -5) (undo-tree-id4582 . -5) (undo-tree-id4583 . -6) (undo-tree-id4584 . -6) (undo-tree-id4585 . -6) (undo-tree-id4586 . -6) (undo-tree-id4587 . -6) (undo-tree-id4588 . -6) (undo-tree-id4589 . -6) (undo-tree-id4590 . -6) (undo-tree-id4591 . -6) (undo-tree-id4592 . -6) (undo-tree-id4593 . -6) (undo-tree-id4594 . -6) (undo-tree-id4595 . -6) (undo-tree-id4596 . -6) (undo-tree-id4597 . -6) (undo-tree-id4598 . -6) (undo-tree-id4599 . -6) (undo-tree-id4600 . -6) (undo-tree-id4601 . -6) (undo-tree-id4602 . -6) (undo-tree-id4603 . -6) (undo-tree-id4604 . -6) (undo-tree-id4605 . -6) (undo-tree-id4606 . -6) (undo-tree-id4607 . -6) (undo-tree-id4608 . -6) (undo-tree-id4609 . -6) (undo-tree-id4610 . -7) (undo-tree-id4611 . -7) (undo-tree-id4612 . -7) (undo-tree-id4613 . -7) (undo-tree-id4614 . -7) (undo-tree-id4615 . -7) (undo-tree-id4616 . -7) (undo-tree-id4617 . -7) (undo-tree-id4618 . -7) (undo-tree-id4619 . -7) (undo-tree-id4620 . -7) (undo-tree-id4621 . -7) (undo-tree-id4622 . -7) (undo-tree-id4623 . -7) (undo-tree-id4624 . -7) (undo-tree-id4625 . -7) (undo-tree-id4626 . -7) (undo-tree-id4627 . -7) (undo-tree-id4628 . -7) (undo-tree-id4629 . -7) (undo-tree-id4630 . -7) (undo-tree-id4631 . -7) (undo-tree-id4632 . -7) (undo-tree-id4633 . -7) (undo-tree-id4634 . -7) (undo-tree-id4635 . -7) (undo-tree-id4636 . -7) (undo-tree-id4637 . -7) 12185 (12178 . 12185) (#("ε" 0 1 (fontified t)) . -12178) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) (undo-tree-id4656 . -1) (undo-tree-id4657 . -1) (undo-tree-id4658 . -1) (undo-tree-id4659 . -1) (undo-tree-id4660 . -1) (undo-tree-id4661 . -1) (undo-tree-id4662 . -1) (undo-tree-id4663 . -1) (undo-tree-id4664 . -1) (undo-tree-id4665 . -1) (undo-tree-id4666 . -1) (undo-tree-id4667 . -1) (undo-tree-id4668 . -1) (undo-tree-id4669 . -1) (undo-tree-id4670 . -1) (undo-tree-id4671 . -1) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -1) (undo-tree-id4680 . -1) (undo-tree-id4681 . -1) (undo-tree-id4682 . -1) (undo-tree-id4683 . -1) (undo-tree-id4684 . -1) (undo-tree-id4685 . -1) (undo-tree-id4686 . -1) (undo-tree-id4687 . -1) (undo-tree-id4688 . -1) (undo-tree-id4689 . -1) (undo-tree-id4690 . -1) (undo-tree-id4691 . -1) (undo-tree-id4692 . -1) (undo-tree-id4693 . -1) (undo-tree-id4694 . -1) (undo-tree-id4695 . -1) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) (undo-tree-id4746 . -1) (undo-tree-id4747 . -1) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -1) (undo-tree-id4763 . -1) (undo-tree-id4764 . -1) (undo-tree-id4765 . -1) (undo-tree-id4766 . -1) (undo-tree-id4767 . -1) (undo-tree-id4768 . -1) (undo-tree-id4769 . -1) (undo-tree-id4770 . -1) (undo-tree-id4771 . -1) (undo-tree-id4772 . -1) (undo-tree-id4773 . -1) (undo-tree-id4774 . -1) (undo-tree-id4775 . -1) (undo-tree-id4776 . -1) (undo-tree-id4777 . -1) (undo-tree-id4778 . -1) (undo-tree-id4779 . -1) (undo-tree-id4780 . -1) (undo-tree-id4781 . -1) (undo-tree-id4782 . -1) (undo-tree-id4783 . -1) (#("," 0 1 (fontified t)) . -12179) (undo-tree-id4784 . -1) (undo-tree-id4785 . -1) (undo-tree-id4786 . -1) (undo-tree-id4787 . -1) (undo-tree-id4788 . -1) (undo-tree-id4789 . -1) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) (undo-tree-id4792 . -1) (undo-tree-id4793 . -1) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) (undo-tree-id4804 . -1) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) (undo-tree-id4810 . -1) (undo-tree-id4811 . -1) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1) (undo-tree-id4833 . -1) (undo-tree-id4834 . -1) (undo-tree-id4835 . -1) (undo-tree-id4836 . -1) (undo-tree-id4837 . -1) (undo-tree-id4838 . -1) (undo-tree-id4839 . -1) (undo-tree-id4840 . -1) (undo-tree-id4841 . -1) (undo-tree-id4842 . -1) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) (undo-tree-id4847 . -1) (undo-tree-id4848 . -1) (undo-tree-id4849 . -1) (undo-tree-id4850 . -1) (undo-tree-id4851 . -1) (undo-tree-id4852 . -1) (undo-tree-id4853 . -1) (undo-tree-id4854 . -1) (undo-tree-id4855 . -1) (undo-tree-id4856 . -1) (undo-tree-id4857 . -1) (undo-tree-id4858 . -1) (undo-tree-id4859 . -1) (undo-tree-id4860 . -1) (undo-tree-id4861 . -1) (undo-tree-id4862 . -1) (undo-tree-id4863 . -1) (undo-tree-id4864 . -1) (undo-tree-id4865 . -1) (undo-tree-id4866 . -1) (undo-tree-id4867 . -1) (undo-tree-id4868 . -1) (undo-tree-id4869 . -1) (undo-tree-id4870 . -1) (undo-tree-id4871 . -1) (undo-tree-id4872 . -1) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (undo-tree-id4877 . -1) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) (undo-tree-id4882 . -1) (undo-tree-id4883 . -1) (undo-tree-id4884 . -1) (undo-tree-id4885 . -1) (undo-tree-id4886 . -1) (undo-tree-id4887 . -1) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (undo-tree-id4891 . -1) (undo-tree-id4892 . -1) (undo-tree-id4893 . -1) (undo-tree-id4894 . -1) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -1) (#(" " 0 1 (fontified t)) . -12180) (undo-tree-id4903 . -1) (undo-tree-id4904 . -1) (undo-tree-id4905 . -1) (undo-tree-id4906 . -1) (undo-tree-id4907 . -1) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (undo-tree-id4941 . -1) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (undo-tree-id4946 . -1) (undo-tree-id4947 . -1) (undo-tree-id4948 . -1) (undo-tree-id4949 . -1) (undo-tree-id4950 . -1) (undo-tree-id4951 . -1) (undo-tree-id4952 . -1) (undo-tree-id4953 . -1) (undo-tree-id4954 . -1) (undo-tree-id4955 . -1) (undo-tree-id4956 . -1) (undo-tree-id4957 . -1) (undo-tree-id4958 . -1) (undo-tree-id4959 . -1) (undo-tree-id4960 . -1) (undo-tree-id4961 . -1) (undo-tree-id4962 . -1) (undo-tree-id4963 . -1) (undo-tree-id4964 . -1) (undo-tree-id4965 . -1) (undo-tree-id4966 . -1) (undo-tree-id4967 . -1) (undo-tree-id4968 . -1) (undo-tree-id4969 . -1) (undo-tree-id4970 . -1) (undo-tree-id4971 . -1) (undo-tree-id4972 . -1) (undo-tree-id4973 . -1) (undo-tree-id4974 . -1) (undo-tree-id4975 . -1) (undo-tree-id4976 . -1) (undo-tree-id4977 . -1) (undo-tree-id4978 . -1) (undo-tree-id4979 . -1) (undo-tree-id4980 . -1) (undo-tree-id4981 . -1) (undo-tree-id4982 . -1) (undo-tree-id4983 . -1) (undo-tree-id4984 . -1) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (#("λ" 0 1 (fontified t)) . -12181) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -1) (undo-tree-id5002 . -1) (undo-tree-id5003 . -1) (undo-tree-id5004 . -1) (undo-tree-id5005 . -1) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) (undo-tree-id5019 . -1) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (undo-tree-id5026 . -1) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (undo-tree-id5035 . -1) (undo-tree-id5036 . -1) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) (undo-tree-id5039 . -1) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) (undo-tree-id5045 . -1) (undo-tree-id5046 . -1) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) 12182 (t 25331 6120 71489 296000)) nil (25331 6214 537610 766000) 0 nil])
([nil nil ((12213 . 12214) (t 25331 6214 550970 845000)) nil (25331 6237 414574 578000) 0 nil])
([nil nil ((12306 . 12307) (12263 . 12264)) nil (25331 6237 414563 613000) 0 nil])
([nil nil ((12332 . 12339) (t 25331 6237 430845 293000)) nil (25331 6275 507225 563000) 0 nil])
([nil nil ((12382 . 12383)) nil (25331 6275 507215 157000) 0 nil])
([nil nil ((12182 . 12193) (t 25331 6275 523969 592000)) nil (25331 6352 422977 147000) 0 nil])
([nil nil ((12244 . 12255) (t 25331 6352 436880 870000)) nil (25331 6358 934227 271000) 0 nil])
([nil current ((12362 . 12363) (12361 . 12362) (12360 . 12361) (12359 . 12360) (12358 . 12359) (12357 . 12358) (12356 . 12357) (12355 . 12356) (12354 . 12355) (#("l" 0 1 (fontified nil)) . -12354) (undo-tree-id5060 . -1) 12355 (12354 . 12355) (12353 . 12354) (12352 . 12353) (12300 . 12309) (#("l" 0 1 (fontified t)) . -12300) (undo-tree-id5061 . -1) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) (undo-tree-id5072 . -1) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) (undo-tree-id5082 . -1) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) 12301 (12298 . 12301)) nil (25331 6358 934214 490000) 0 nil])
nil
