var documenterSearchIndex = {"docs":
[{"location":"pot/#Wrapper-functions-for-the-POT-library","page":"POT","title":"Wrapper functions for the POT library","text":"","category":"section"},{"location":"pot/","page":"POT","title":"POT","text":"If you load the PyCall package, you get access to wrappers of functions in the Python Optimal Transport (POT) package. The wrapper functions are available in the submodule POT.","category":"page"},{"location":"pot/#Exact-optimal-transport-(Kantorovich)-problem","page":"POT","title":"Exact optimal transport (Kantorovich) problem","text":"","category":"section"},{"location":"pot/","page":"POT","title":"POT","text":"POT.emd\nPOT.emd2","category":"page"},{"location":"pot/#OptimalTransport.POT.emd","page":"POT","title":"OptimalTransport.POT.emd","text":"emd(mu, nu, C)\n\nCompute transport map for Monge-Kantorovich problem with source and target marginals mu and nu and a cost matrix C of dimensions (length(mu), length(nu)).\n\nReturn optimal transport coupling γ of the same dimensions as C which solves \n\ninf_gamma in Pi(mu nu) langle gamma C rangle\n\nThis function is a wrapper of the function emd in the Python Optimal Transport package.\n\n\n\n\n\n","category":"function"},{"location":"pot/#OptimalTransport.POT.emd2","page":"POT","title":"OptimalTransport.POT.emd2","text":"emd2(mu, nu, C)\n\nCompute exact transport cost for Monge-Kantorovich problem with source and target marginals mu and nu and a cost matrix C of dimensions (length(mu), length(nu)).\n\nReturns optimal transport cost (a scalar), i.e. the optimal value\n\ninf_gamma in Pi(mu nu) langle gamma C rangle\n\nThis function is a wrapper of the function emd2 in the Python Optimal Transport package.\n\n\n\n\n\n","category":"function"},{"location":"pot/#Entropically-regularised-optimal-transport","page":"POT","title":"Entropically regularised optimal transport","text":"","category":"section"},{"location":"pot/","page":"POT","title":"POT","text":"POT.sinkhorn\nPOT.sinkhorn2","category":"page"},{"location":"pot/#OptimalTransport.POT.sinkhorn","page":"POT","title":"OptimalTransport.POT.sinkhorn","text":"sinkhorn(mu, nu, C, eps; tol=1e-9, max_iter = 1000, method = \"sinkhorn\", verbose = false)\n\nCompute optimal transport map of histograms mu and nu with cost matrix C and entropic regularization parameter eps. \n\nMethod can be a choice of \"sinkhorn\", \"greenkhorn\", \"sinkhorn_stabilized\", or \"sinkhorn_epsilon_scaling\" (Flamary et al., 2017).\n\nThis function is a wrapper of the function sinkhorn in the Python Optimal Transport package.\n\n\n\n\n\n","category":"function"},{"location":"pot/#OptimalTransport.POT.sinkhorn2","page":"POT","title":"OptimalTransport.POT.sinkhorn2","text":"sinkhorn2(mu, nu, C, eps; tol=1e-9, max_iter = 1000, method = \"sinkhorn\", verbose = false)\n\nCompute optimal transport cost of histograms mu and nu with cost matrix C and entropic regularization parameter eps.\n\nMethod can be a choice of \"sinkhorn\", \"greenkhorn\", \"sinkhorn_stabilized\", or \"sinkhorn_epsilon_scaling\" (Flamary et al., 2017).\n\nThis function is a wrapper of the function sinkhorn2 in the Python Optimal Transport package.\n\n\n\n\n\n","category":"function"},{"location":"pot/#Unbalanced-optimal-transport","page":"POT","title":"Unbalanced optimal transport","text":"","category":"section"},{"location":"pot/","page":"POT","title":"POT","text":"POT.sinkhorn_unbalanced\nPOT.sinkhorn_unbalanced2","category":"page"},{"location":"pot/#OptimalTransport.POT.sinkhorn_unbalanced","page":"POT","title":"OptimalTransport.POT.sinkhorn_unbalanced","text":"sinkhorn_unbalanced(mu, nu, C, eps, lambda; tol = 1e-9, max_iter = 1000, method = \"sinkhorn\", verbose = false)\n\nCompute optimal transport map of histograms mu and nu with cost matrix C, using entropic regularisation parameter eps and marginal weighting functions lambda.\n\nThis function is a wrapper of the function sinkhorn_unbalanced in the Python Optimal Transport package.\n\n\n\n\n\n","category":"function"},{"location":"pot/#OptimalTransport.POT.sinkhorn_unbalanced2","page":"POT","title":"OptimalTransport.POT.sinkhorn_unbalanced2","text":"sinkhorn_unbalanced2(mu, nu, C, eps, lambda; tol = 1e-9, max_iter = 1000, method = \"sinkhorn\", verbose = false)\n\nCompute optimal transport cost of histograms mu and nu with cost matrix C, using entropic regularisation parameter eps and marginal weighting functions lambda.\n\nThis function is a wrapper of the function sinkhorn_unbalanced2 in the Python Optimal Transport package.\n\n\n\n\n\n","category":"function"},{"location":"#OptimalTransport.jl-Documentation","page":"Home","title":"OptimalTransport.jl Documentation","text":"","category":"section"},{"location":"#Exact-optimal-transport-(Kantorovich)-problem","page":"Home","title":"Exact optimal transport (Kantorovich) problem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"emd\nemd2","category":"page"},{"location":"#OptimalTransport.emd","page":"Home","title":"OptimalTransport.emd","text":"emd(μ, ν, C, optimizer)\n\nCompute the optimal transport map γ for the Monge-Kantorovich problem with source histogram μ, target histogram ν, and cost matrix C of size (length(μ), length(ν)) which solves\n\ninf_γ  Π(μ ν) langle γ C rangle\n\nThe corresponding linear programming problem is solved with the user-provided optimizer. Possible choices are Tulip.Optimizer() and Clp.Optimizer() in the Tulip and Clp packages, respectively.\n\n\n\n\n\n","category":"function"},{"location":"#OptimalTransport.emd2","page":"Home","title":"OptimalTransport.emd2","text":"emd2(μ, ν, C, optimizer)\n\nCompute the optimal transport cost (a scalar) for the Monge-Kantorovich problem with source histogram μ, target histogram ν, and cost matrix C of size (length(μ), length(ν)) which is given by\n\ninf_γ  Π(μ ν) langle γ C rangle\n\nThe corresponding linear programming problem is solved with the user-provided optimizer. Possible choices are Tulip.Optimizer() and Clp.Optimizer() in the Tulip and Clp packages, respectively.\n\n\n\n\n\n","category":"function"},{"location":"#Entropically-regularised-optimal-transport","page":"Home","title":"Entropically regularised optimal transport","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"sinkhorn\nsinkhorn2\nsinkhorn_stabilized_epsscaling\nsinkhorn_stabilized\nsinkhorn_barycenter","category":"page"},{"location":"#OptimalTransport.sinkhorn","page":"Home","title":"OptimalTransport.sinkhorn","text":"sinkhorn(mu, nu, C, eps; tol=1e-9, check_marginal_step=10, maxiter=1000)\n\nCompute entropically regularised transport map of histograms mu and nu with cost matrix C and entropic regularization parameter eps. \n\nReturn optimal transport coupling γ of the same dimensions as C which solves \n\ninf_gamma in Pi(mu nu) langle gamma C rangle - epsilon H(gamma)\n\nwhere H is the entropic regulariser, H(gamma) = -sum_i j gamma_ij log(gamma_ij).\n\n\n\n\n\n","category":"function"},{"location":"#OptimalTransport.sinkhorn2","page":"Home","title":"OptimalTransport.sinkhorn2","text":"sinkhorn2(mu, nu, C, eps; tol=1e-9, check_marginal_step=10, maxiter=1000)\n\nCompute entropically regularised transport cost of histograms mu and nu with cost matrix C and entropic regularization parameter eps.\n\nReturn optimal value of\n\ninf_gamma in Pi(mu nu) langle gamma C rangle - epsilon H(gamma)\n\nwhere H is the entropic regulariser, H(gamma) = -sum_i j gamma_ij log(gamma_ij).\n\n\n\n\n\n","category":"function"},{"location":"#OptimalTransport.sinkhorn_stabilized_epsscaling","page":"Home","title":"OptimalTransport.sinkhorn_stabilized_epsscaling","text":"sinkhorn_stabilized_epsscaling(mu, nu, C, eps; absorb_tol = 1e3, max_iter = 1000, tol = 1e-9, lambda = 0.5, k = 5, verbose = false)\n\nCompute optimal transport map of histograms mu and nu with cost matrix C and entropic regularisation parameter eps.  Uses stabilized Sinkhorn algorithm with epsilon-scaling (Schmitzer et al., 2019). \n\nk epsilon-scaling steps are used with scaling factor lambda, i.e. sequentially solve Sinkhorn with regularisation parameters  [lambda^(1-k), ..., lambda^(-1), 1]*eps. \n\n\n\n\n\n","category":"function"},{"location":"#OptimalTransport.sinkhorn_stabilized","page":"Home","title":"OptimalTransport.sinkhorn_stabilized","text":"sinkhorn_stabilized(mu, nu, C, eps; absorb_tol = 1e3, max_iter = 1000, tol = 1e-9, alpha = nothing, beta = nothing, return_duals = false, verbose = false)\n\nCompute optimal transport map of histograms mu and nu with cost matrix C and entropic regularisation parameter eps.  Uses stabilized Sinkhorn algorithm (Schmitzer et al., 2019).\n\n\n\n\n\n","category":"function"},{"location":"#OptimalTransport.sinkhorn_barycenter","page":"Home","title":"OptimalTransport.sinkhorn_barycenter","text":"sinkhorn_barycenter(mu_all, C_all, eps, lambda_all; tol = 1e-9, check_marginal_step = 10, max_iter = 1000)\n\nCompute the entropically regularised (i.e. Sinkhorn) barycenter for a collection of N histograms mu_all with respective cost matrices C_all, relative weights lambda_all, and entropic regularisation parameter eps. \n\nmu_all is taken to contain N histograms mu_all[i, :] for math i = 1, \\ldots, N.\nC_all is taken to be a list of N cost matrices corresponding to the mu_all[i, :].\neps is the scalar regularisation parameter.\nlambda_all are positive weights.\n\nReturns the entropically regularised barycenter of the mu_all, i.e. the distribution that minimises\n\nmin_mu in Sigma sum_i = 1^N lambda_i mathrmentropicOT^epsilon_C_i(mu mu_i)\n\nwhere mathrmentropicOT^epsilon_C denotes the entropic optimal transport cost with cost C and entropic regularisation level epsilon.\n\n\n\n\n\n","category":"function"},{"location":"#Unbalanced-optimal-transport","page":"Home","title":"Unbalanced optimal transport","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"sinkhorn_unbalanced\nsinkhorn_unbalanced2","category":"page"},{"location":"#OptimalTransport.sinkhorn_unbalanced","page":"Home","title":"OptimalTransport.sinkhorn_unbalanced","text":"sinkhorn_unbalanced(mu, nu, C, lambda1, lambda2, eps; tol = 1e-9, max_iter = 1000, verbose = false, proxdiv_F1 = nothing, proxdiv_F2 = nothing)\n\nComputes the optimal transport map of histograms mu and nu with cost matrix C and entropic regularization parameter eps,  using the unbalanced Sinkhorn algorithm [Chizat 2016] with KL-divergence terms for soft marginal constraints, with weights (lambda1, lambda2) for the marginals mu, nu respectively.\n\nFor full generality, the user can specify the soft marginal constraints (F_1(cdot  mu) F_2(cdot  nu)) to the problem\n\nmin_gamma epsilon mathrmKL(gamma  exp(-Cepsilon)) + F_1(gamma_1  mu) + F_2(gamma_2  nu)\n\nvia math\\mathrm{proxdiv}_{F_1}(s, p) and math\\mathrm{proxdiv}_{F_2}(s, p) (see Chizat et al., 2016 for details on this). If specified, the algorithm will use the user-specified F1, F2 rather than the default (a KL-divergence).\n\n\n\n\n\n","category":"function"},{"location":"#OptimalTransport.sinkhorn_unbalanced2","page":"Home","title":"OptimalTransport.sinkhorn_unbalanced2","text":"sinkhorn_unbalanced2(mu, nu, C, lambda1, lambda2, eps; tol = 1e-9, max_iter = 1000, verbose = false, proxdiv_F1 = nothing, proxdiv_F2 = nothing)\n\nComputes the optimal transport cost of histograms mu and nu with cost matrix C and entropic regularization parameter eps,  using the unbalanced Sinkhorn algorithm [Chizat 2016] with KL-divergence terms for soft marginal constraints, with weights (lambda1, lambda2) for the marginals mu, nu respectively.\n\nSee documentation for sinkhorn_unbalanced for additional details.\n\n\n\n\n\n","category":"function"},{"location":"#Quadratically-regularised-optimal-transport","page":"Home","title":"Quadratically regularised optimal transport","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"quadreg","category":"page"},{"location":"#OptimalTransport.quadreg","page":"Home","title":"OptimalTransport.quadreg","text":"quadreg(mu, nu, C, ϵ; θ = 0.1, tol = 1e-5,maxiter = 50,κ = 0.5,δ = 1e-5)\n\nComputes the optimal transport map of histograms mu and nu with cost matrix C and quadratic regularization parameter ϵ,  using the semismooth Newton algorithm [Lorenz 2016].\n\nThis implementation makes use of IterativeSolvers.jl and SparseArrays.jl.\n\nParameters:\n\nθ: starting Armijo parameter.\n\ntol: tolerance of marginal error.\n\nmaxiter: maximum interation number.\n\nκ: control parameter of Armijo.\n\nδ: small constant for the numerical stability of conjugate gradient iterative solver.\n\nTips: If the algorithm does not converge, try some different values of θ.\n\nReference: Lorenz, D.A., Manns, P. and Meyer, C., 2019. Quadratically regularized optimal transport. arXiv preprint arXiv:1903.01112v4.\n\n\n\n\n\n","category":"function"}]
}
